<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Programming - Category - Adrians site</title><link>https://adrianstobbe.com/categories/programming/</link><description>Programming - Category - Adrians site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 20 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://adrianstobbe.com/categories/programming/" rel="self" type="application/rss+xml"/><item><title>Migrating to Hashnode</title><link>https://adrianstobbe.com/posts/migrating-to-hashnode/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/migrating-to-hashnode/</guid><description><![CDATA[<p>Hey there,
I decided to post my technical posts on <a href="https://hashnode.com/" target="_blank" rel="noopener noreffer">Hashnode</a> from now on. I like the platform idea and want to share my articles within a bigger tech community. You will find these posts on <a href="https://blog.adrianstobbe.com/" target="_blank" rel="noopener noreffer">blog.adrianstobbe.com</a>.</p>
<p>In the future, you will find only all non-tech and personal articles on my personal blog.</p>
<p>Most importantly, the migration of my tech articles to a seperate blog let&rsquo;s me better target the interests of my readers.</p>
]]></description></item><item><title>Calico config for kubeadm cluster on Azure</title><link>https://adrianstobbe.com/posts/calico-azure/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/calico-azure/</guid><description><![CDATA[<p>Recently, I tried to configure calico networking on a self-managed Kubernetes cluster on Azure.
It did not work out of the box and many instructions on the internet did not work for me.
In the following, I want to share my setup.
To set up the network and VMs, I followed <a href="https://blog.nillsf.com/index.php/2021/10/29/setting-up-kubernetes-on-azure-using-kubeadm/" target="_blank" rel="noopener noreffer">this tutorial</a>. After installing the <a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises" target="_blank" rel="noopener noreffer">default configuration of calico</a>, inter-node communication between pods did not work.</p>
<p>My working approach uses User-Defined-Routes (UDR) on Azure to route traffic from the different pod-subnets of each node.
Be sure to only have one IP address assigned to each network interface! I installed the Azure CNI plugin before, which assigns pod IPs from the secondary IPs of the vnet that are assigned to the network interface. This caused problems in the IP detection in Calico, but it can be easily fixed by deleting the secondary IPs.</p>
<p>When bootstrapping Kubernetes, you should also set the pod subnet (CIDR) to avoid address overlap with the virtual network.
The default for kubeadm is <code>192.168.0.0/16</code> which indeed overlapped with my Azure network.</p>
<p>This is my kubeadm config:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat conf.yaml
</span></span><span class="line"><span class="cl">apiServer:
</span></span><span class="line"><span class="cl">  timeoutForControlPlane: 4m0s
</span></span><span class="line"><span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
</span></span><span class="line"><span class="cl">kind: ClusterConfiguration
</span></span><span class="line"><span class="cl">kubernetesVersion: v1.19.16 #-beta.0.1017_d0acb1e3ae68d3-dirty
</span></span><span class="line"><span class="cl">networking:
</span></span><span class="line"><span class="cl">  podSubnet: &#34;172.16.0.0/16&#34;
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
</span></span><span class="line"><span class="cl">kind: InitConfiguration
</span></span><span class="line"><span class="cl">nodeRegistration:
</span></span><span class="line"><span class="cl">  criSocket: &#34;/run/containerd/containerd.sock&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>To bootstrap the cluster, execute:
<code>./kubeadm init --upload-certs  --cri-socket &quot;/run/containerd/containerd.sock&quot; --config conf.yaml</code></p>
<p>Then, get the calico setup from <a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>In the yaml set the pod CIDR:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">- name: CALICO_IPV4POOL_CIDR
</span></span><span class="line"><span class="cl">  value: &#34;172.16.0.0/16&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><p>To configure the inter-node pod communication, I followed these steps <a href="https://stackoverflow.com/a/67242381/10531075" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>Before applying I recommend to set up VXLAN instead of ipip mode (see below).
By default, calico uses ipip tunneling for pod communication. A tunnel is a virtual network interface to connect subnets. This did not work in my Azure network.
Instead, I configured VXLAN.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat vxlan.yaml
</span></span><span class="line"><span class="cl">apiVersion: crd.projectcalico.org/v1
</span></span><span class="line"><span class="cl">kind: IPPool
</span></span><span class="line"><span class="cl">metadata:
</span></span><span class="line"><span class="cl">  name: ippool-vxlan-1
</span></span><span class="line"><span class="cl">spec:
</span></span><span class="line"><span class="cl">  cidr: 172.16.0.0/16
</span></span><span class="line"><span class="cl">  vxlanMode: Always
</span></span><span class="line"><span class="cl">  natOutgoing: true
</span></span></code></pre></td></tr></table>
</div>
</div><p>Traffic to the pod network (outside the node)  should then not be routed to <code>tunl0</code>  anymore:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip a
</span></span><span class="line"><span class="cl">4: tunl0@NONE: &lt;NOARP,UP,LOWER_UP&gt; mtu 1480 qdisc noqueue state UNKNOWN group default qlen 1000
</span></span><span class="line"><span class="cl">    link/ipip 0.0.0.0 brd 0.0.0.0
</span></span></code></pre></td></tr></table>
</div>
</div><p>Install <code>calioctl</code> and verify that there is only one ippool:
<code>calicoctl get ippools</code></p>
<p>If not, delete the other pool:
<code>calicoctl delete pool default-ipv4-ippool</code></p>
<p>You need to reboot, to force a reassignment of the pod IPs to the new network.</p>
<p>Then doublecheck that the the CIDR did not change:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">kubectl get ipamblocks.crd.projectcalico.org \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>-<span class="l">o jsonpath=&#34;{range .items[*]}{&#39;podNetwork: &#39;}{.spec.cidr}{&#39;\t NodeIP: &#39;}{.spec.affinity}{&#39;\n&#39;}&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Otherwise, you need to update the Azure routing table!</p>
<p>If you want to dig deeper into the different networking options in calico for Azure, I recommend this video:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/JyLtg_SJ1lo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></description></item><item><title>[Tutorial]: Bootsrapping your custom Kubernetes with kubeadm</title><link>https://adrianstobbe.com/posts/custom-k8s/</link><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/custom-k8s/</guid><description><![CDATA[<p>In this tutorial, I want to show you how to bootstrap a Kubernetes cluster with <code>kubeadm</code> using your customized Kubernetes fork. This might be useful if you want to use new features that are not yet merged in the upstream. For development, it&rsquo;s of course much easier to set up a local cluster (<code>./hack/local-up-cluster.sh</code>), but to test functionality across different nodes, you might need a distributed cluster.</p>
<p>One option is to install it <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way" target="_blank" rel="noopener noreffer">The hard way</a>, but I think it&rsquo;s more convenient to use <code>kubeadm</code>.
The challenge is that you need container images for the kube control-plane components.</p>
<p>I found it difficult to find good documentation on this process, so I hope to help you along with this.</p>
<h2 id="requirements">Requirements</h2>
<p>By default Kubeadm pulls the Kubernetes version matching the version of kubeadm from the official registry. But it also allows to specify a custom registry.
To install our custom Kubernetes, we will need to build and pull the required container images, tag them with the expected version of kubeadm, and the push them to our registry.</p>
<h2 id="build-images">Build images</h2>
<p>I built the images on a Ubuntu machine, since the build is resource intensive.
Kubernetes is big, so be sure to have enough space on the VM! The build happens inside a docker container, so make sure to have docker installed. VMs usually only have a small disk image, so I created a symbolic link to save the docker files on another attached drive (here mounted on <code>/mnt</code>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo -s
</span></span><span class="line"><span class="cl">systemctl stop docker
</span></span><span class="line"><span class="cl">rm -rf /var/lib/docker
</span></span><span class="line"><span class="cl">mkdir -p /mnt/docker
</span></span><span class="line"><span class="cl">ln -s /mnt/docker /var/lib/docker
</span></span><span class="line"><span class="cl">systemctl restart docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, inside the kubernetes root path, specify your docker registry and run:
<code>KUBE_SERVER_PLATTFORMS=&quot;linux/amd64&quot; KUBE_DOCKER_REGISTRY=&quot;sadrian99&quot; KUBE_RELEASE_RUN_TESTS=n ./build/release-images.sh</code>
I recommend to set a flag for the image version such that the version coincides with what kubeadm expects (version of kubeadm).
In my case, this was <code>v1.19.16</code>.</p>
<h2 id="tag-images-and-push-to-registry">Tag images and push to registry</h2>
<p>The generated image names have a trailing <code>amd64</code> which needs to be removed for <code>kubeadm</code>:
<code>IMGN</code>: new name for kubadm
<code>IMG</code>: old image name
<code>VER</code>: old version tag
<code>VERN</code>: new version tag
<code>REPO</code>: your container registry url
In my case, <code>REPO=sadrian99</code> and <code>VERN=v.19.16</code>. Then we tag the image with the new name:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">export IMG=kube-apiserver-amd64; export IMGN=kube-apiserver
</span></span><span class="line"><span class="cl">docker tag $REPO/$IMG:$VER sadrian99/$IMGN:$VERN &amp;&amp; docker push $REPO/$IMGN:$VERN```
</span></span></code></pre></td></tr></table>
</div>
</div><p>You need to do this for these images:</p>
<ul>
<li>kube-apiserver:v1.19.16</li>
<li>kube-controller-manager:v1.19.16</li>
<li>kube-scheduler:v1.19.16</li>
<li>kube-proxy:v1.19.16</li>
</ul>
<p>Additionally you need to pull these images and copy them to your registry:</p>
<ul>
<li>pause:3.2</li>
<li>etcd:3.4.7-0</li>
<li>coredns:1.6.7</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">export D=coredns:1.6.7
</span></span><span class="line"><span class="cl">docker pull k8s.gcr.io/$D &amp;&amp; docker tag k8s.gcr.io/$D $REPO/$D &amp;&amp; docker push $REPO/$D
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="kubeadm-bootstrap">Kubeadm bootstrap</h2>
<p>You can test if the images are all available:
<code>kubeadm config images pull --image-repository sadrian99 </code></p>
<p>Then you can add <code>--image-repository sadrian99</code> to the <code>init</code> command to bootstrap your cluster.</p>
<p>Congrats, you should now have a cluster with your own Kubernetes version! I used this to <a href="/posts/pod-migration" rel="">migrate pods</a> across nodes. Let me know what your use case is!</p>
]]></description></item><item><title>[Tutorial]: Kubernetes stateful pod migration</title><link>https://adrianstobbe.com/posts/pod-migration/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/pod-migration/</guid><description><![CDATA[<p>This is an extensive tutorial on how to set up a Kubernetes cluster that supports pod migration.</p>
<h2 id="why">Why</h2>
<p>Statelessness is the basic foundation for microservices run inside Kubernetes. Outside it&rsquo;s main application domain, the platform also appeals to the High Performance Computing (HPC) community for that infrastructure management can be delegated to cloud providers and it&rsquo;s on-demand scaling. The challenge is that HPC jobs are usually long running and stateful. Jobs such as simulations or optimization problems usually keep their state in memory and state checkpointing on disk is not always available.
This is undesirable because failures are expected to occur.
Matters becomes even worse for jobs with unpredictable resource requirements. Unexpected spikes in memory can lead to out-of-memory node situations, which results in pods being killed. The catastrophic consequence is the complete loss of job progress from many hours or even days of compute time.
To avoid this, a migration of stateful pods to another node would be desirable.</p>
<h2 id="status-quo">Status quo</h2>
<p>Currently, Kubernetes does not support pod migration.
However, a PoC of a pod migration n prior work by <a href="https://www.researchgate.net/publication/349662156_Migrating_Pods_in_Kubernetes" target="_blank" rel="noopener noreffer">Jakob Schrettenbrunner</a> showed the feasibility. A <a href="https://github.com/kubernetes/enhancements/pull/1990" target="_blank" rel="noopener noreffer">proposal</a> to support very basic checkpointing (forensic checkpoiting without restore) functionality has recently been accepted by the Kubernetes community as well and is expected to be available in future releases.</p>
<h2 id="goal">Goal</h2>
<p>Building on the prior PoC of Jakob Schrettenbrunner, I want to show you step by step how to set up a Kubernetes cluster with pod migration functionality. Bootstrapping a Kubernetes cluster from scratch is not a trivial task, but <code>kubeadm</code> will help us. Jakob also provided some <a href="https://docs.google.com/document/d/1E5p_FOHDGAp5YEQ23dCi9I8wPnMzd4aOazxI4uO_AMo/edit#" target="_blank" rel="noopener noreffer">documentation</a> on his setup and while very helpful it is far from complete and does not mention all potential gotchas. You might suspect already that this won&rsquo;t be a quick and easy process, but I hope to make it a lot easier for you through this extensive tutorial.</p>
<h2 id="demo">Demo</h2>
<p>To see what to expect, here is a quick demo of the steps to migrate a pod:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IPY852th_T0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<h2 id="1-cluster-setup">1. Cluster setup</h2>
<p>The cluster consists of 1 master node and 2 worker nodes. The VMs are provisioned in Microsoft Azure. For migrating the pod across a worker node, <a href="https://docs.microsoft.com/en-us/azure/storage/files/files-smb-protocol?tabs=azure-portal" target="_blank" rel="noopener noreffer">Azure&rsquo;s SMB file share server</a>) is used. You might also use an NFS server (and it might even make things easier as mentioned later..), but this was not possible for company policy reasons in my case.</p>
<p>Kubernetes is bootstrapped using <code>kubeadm</code>. It&rsquo;s tested with version <code>v1.19.0-beta.0.1015+b521fb5114995f-dirty</code> ( binaries are available <a href="https://github.com/elchead/kubernetes/releases/tag/v8.1.0" target="_blank" rel="noopener noreffer">here</a>, but I recommend building from source).</p>
<h3 id="network-setup">Network setup</h3>
<p>To set up the cluster network, I followed <a href="https://blog.nillsf.com/index.php/2021/10/29/setting-up-kubernetes-on-azure-using-kubeadm/" target="_blank" rel="noopener noreffer">this tutorial</a>. You can use the web shell on Azure for this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">az group create -n kubeadm -l westus2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network vnet create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --address-prefix 192.168.0.0/16 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --subnet-name kube <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --subnet-prefix 192.168.0.0/16
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nsg create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubeadm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nsg rule create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --nsg-name kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubeadmssh <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --protocol tcp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --priority <span class="m">1000</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --destination-port-range <span class="m">22</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --access allow
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nsg rule create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --nsg-name kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubeadmWeb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --protocol tcp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --priority <span class="m">1001</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --destination-port-range <span class="m">6443</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --access allow
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network vnet subnet update <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -g kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -n kube <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --vnet-name kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network-security-group kubeadm
</span></span><span class="line"><span class="cl"><span class="c1"># load balancer:</span>
</span></span><span class="line"><span class="cl">az network public-ip create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name controlplaneip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --sku Standard <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --dns-name nilfrankubeadm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> az network lb create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubemaster <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --sku Standard <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --public-ip-address controlplaneip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --frontend-ip-name controlplaneip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --backend-pool-name masternodes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network lb probe create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --lb-name kubemaster <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubemasterweb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --protocol tcp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --port <span class="m">6443</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network lb rule create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --lb-name kubemaster <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubemaster <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --protocol tcp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --frontend-port <span class="m">6443</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --backend-port <span class="m">6443</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --frontend-ip-name controlplaneip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --backend-pool-name masternodes <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --probe-name kubemasterweb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --disable-outbound-snat <span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --idle-timeout <span class="m">15</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --enable-tcp-reset <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nic ip-config address-pool add <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --address-pool masternodes <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ip-config-name ipconfigkube-master-1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --nic-name kube-master-1VMNic <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --lb-name kubemaster
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nic ip-config address-pool add <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --address-pool masternodes <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ip-config-name ipconfigkube-master-2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --nic-name kube-master-2VMNic <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --lb-name kubemaster
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="vm-provisioning">VM provisioning</h3>
<p><strong>Master</strong></p>
<p>The specs of my master node VM are as follows on Ubuntu 21.04 (20.04 LTS could also be used):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;kube-master-3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;location&#34;</span><span class="p">:</span> <span class="s2">&#34;westeurope&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ubuntu-21-04-lts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;publisher&#34;</span><span class="p">:</span> <span class="s2">&#34;tidalmediainc&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;product&#34;</span><span class="p">:</span> <span class="s2">&#34;ubuntu-21-04-lts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;vmSize&#34;</span><span class="p">:</span> <span class="s2">&#34;Standard_D2ds_v4&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Worker</strong></p>
<p>Both worker VMs share the same specs:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;zone2/zone3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;location&#34;</span><span class="p">:</span> <span class="s2">&#34;westeurope&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;vmSize&#34;</span><span class="p">:</span> <span class="s2">&#34;Standard_E16-4ds_v4&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;imageReference&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;publisher&#34;</span><span class="p">:</span> <span class="s2">&#34;canonical&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;offer&#34;</span><span class="p">:</span> <span class="s2">&#34;0001-com-ubuntu-server-focal&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;sku&#34;</span><span class="p">:</span> <span class="s2">&#34;20_04-lts-gen2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;latest&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After connecting to the VM, go into root mode:
<code>sudo -s</code>
All following steps assume this!</p>
<h2 id="2-kernel-downgrade">2. Kernel downgrade</h2>
<h3 id="worker">Worker</h3>
<p>As mentioned <a href="https://github.com/checkpoint-restore/criu/issues/860" target="_blank" rel="noopener noreffer">here</a>, recent Ubuntu kernels broke compatibility with CRIU.
Hence we downgrade the kernel:
<code>apt install -y linux-image-unsigned-5.4.0-1068-azure</code></p>
<p>Follow <a href="https://meetrix.io/blog/aws/changing-default-ubuntu-kernel.html" target="_blank" rel="noopener noreffer">these steps</a> to change the boot kernel.</p>
<h2 id="3-install-prequisites">3. Install Prequisites</h2>
<h3 id="master-node">Master node</h3>
<h4 id="containerd--kubelet">Containerd + Kubelet</h4>
<p>On the master node, you can install the official releases:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="p">|</span> sudo apt-key add -
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb https://apt.kubernetes.io/ kubernetes-xenial main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/kubernetes.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apt update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apt install -y containerd kubelet
</span></span></code></pre></td></tr></table>
</div>
</div><p>But for safety, you should replace the <code>kubelet</code> with the binary path defined in the systemd service (<code>/usr/bin/kubelet</code>).
You can get the customized kubelet like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/elchead/kubernetes/releases/download/v8.1.0/kubelet
</span></span><span class="line"><span class="cl">chmod +x ./kubelet
</span></span><span class="line"><span class="cl">cp ./kubelet /usr/bin
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="kubeadm">Kubeadm</h4>
<p>To get the <code>kubeadm</code> version compatible with our modified kubernetes. Inside your home directory, do:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/elchead/kubernetes/releases/download/v8.1.0/kubeadm
</span></span><span class="line"><span class="cl">chmod +x ./kubeadm
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="kubectl">Kubectl</h4>
<p>Install as described <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/" target="_blank" rel="noopener noreffer">here</a></p>
<h3 id="worker-node">Worker node</h3>
<p>I recommend to perform the following steps in parallel on both worker VMs. You might use <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/01-prerequisites.md#running-commands-in-parallel-with-tmux" target="_blank" rel="noopener noreffer">tmux</a> or iTerm on Mac ( <code>Cmd+Shift+i</code>).</p>
<h4 id="criu">CRIU</h4>
<p>As described <a href="https://software.opensuse.org/download/package?package=criu&amp;project=devel%3Atools%3Acriu" target="_blank" rel="noopener noreffer">here</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;deb http://download.opensuse.org/repositories/devel:/tools:/criu/xUbuntu_20.04/ /&#39;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/devel:tools:criu.list
</span></span><span class="line"><span class="cl">curl -fsSL https://download.opensuse.org/repositories/devel:tools:criu/xUbuntu_20.04/Release.key <span class="p">|</span> gpg --dearmor <span class="p">|</span> sudo tee /etc/apt/trusted.gpg.d/devel_tools_criu.gpg &gt; /dev/null
</span></span><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install -y criu
</span></span></code></pre></td></tr></table>
</div>
</div><p>Verify the version to be 3.16.1:
<code>criu --version</code></p>
<h4 id="golang">Golang</h4>
<p>Follow <a href="https://go.dev/doc/install" target="_blank" rel="noopener noreffer">here</a>. I installed v1.17.8:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://go.dev/dl/go1.17.8.linux-amd64.tar.gz
</span></span><span class="line"><span class="cl">tar -C /usr/local -xzf go1.17.8.linux-amd64.tar.gz
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="containerd">Containerd</h4>
<h5 id="install-dependencies">Install dependencies</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apt install btrfs-progs libbtrfs-dev runc
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="systemd-service">Systemd service</h5>
<p>I took the dirty path and used <code>apt</code> to install an official release :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apt update
</span></span><span class="line"><span class="cl">apt install containerd
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, I later replaced the binary defined in the systemd config with my fork binary.
The file looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat /lib/systemd/system/containerd.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Copyright The containerd Authors.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);</span>
</span></span><span class="line"><span class="cl"><span class="c1"># you may not use this file except in compliance with the License.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You may obtain a copy of the License at</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     http://www.apache.org/licenses/LICENSE-2.0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Unless required by applicable law or agreed to in writing, software</span>
</span></span><span class="line"><span class="cl"><span class="c1"># distributed under the License is distributed on an &#34;AS IS&#34; BASIS,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See the License for the specific language governing permissions and</span>
</span></span><span class="line"><span class="cl"><span class="c1"># limitations under the License.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>containerd container runtime
</span></span><span class="line"><span class="cl"><span class="nv">Documentation</span><span class="o">=</span>https://containerd.io
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>network.target local-fs.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">ExecStartPre</span><span class="o">=</span>-/sbin/modprobe overlay
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/containerd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>notify
</span></span><span class="line"><span class="cl"><span class="nv">Delegate</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">KillMode</span><span class="o">=</span>process
</span></span><span class="line"><span class="cl"><span class="nv">Restart</span><span class="o">=</span>always
</span></span><span class="line"><span class="cl"><span class="nv">RestartSec</span><span class="o">=</span><span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Having non-zero Limit*s causes performance problems due to accounting overhead</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in the kernel. We recommend using cgroups to do container-local accounting.</span>
</span></span><span class="line"><span class="cl"><span class="nv">LimitNPROC</span><span class="o">=</span>infinity
</span></span><span class="line"><span class="cl"><span class="nv">LimitCORE</span><span class="o">=</span>infinity
</span></span><span class="line"><span class="cl"><span class="nv">LimitNOFILE</span><span class="o">=</span>infinity
</span></span><span class="line"><span class="cl"><span class="c1"># Comment TasksMax if your systemd version does not supports it.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Only systemd 226 and above support this version.</span>
</span></span><span class="line"><span class="cl"><span class="nv">TasksMax</span><span class="o">=</span>infinity
</span></span><span class="line"><span class="cl"><span class="nv">OOMScoreAdjust</span><span class="o">=</span>-999
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="build">Build</h5>
<p>I recommend to build from source, but you may also use the binaries inside <code>bin</code>.</p>
<p>Clone my fork and checkout the <code>checkpoint</code> branch. If you want to use the version that only uploads a zip to the file server (please read under [6. Set up file server](#6. Set up file server), use <code>checkpoint-zip</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p /root/go/src/github.com/containerd <span class="o">&amp;&amp;</span> <span class="nb">cd</span> /root/go/src/github.com/containerd
</span></span><span class="line"><span class="cl">git clone https://github.com/elchead/containerd.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> containerd
</span></span><span class="line"><span class="cl">git checkout checkpoint
</span></span></code></pre></td></tr></table>
</div>
</div><p>Build from source:
<code>make &amp;&amp; make install</code></p>
<h4 id="update-systemd-svc-to-custom-binary">Update systemd svc to custom binary</h4>
<p>Stop the service:
`systemctl stop containerd</p>
<p>Inside root of the repository, do:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cp ./bin/containerd /usr/bin/containerd
</span></span><span class="line"><span class="cl">systemctl start containerd
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="configure-cni-plugins">Configure CNI plugins</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GOPATH</span><span class="o">=</span>/root/go
</span></span><span class="line"><span class="cl">./script/setup/install-cni
</span></span></code></pre></td></tr></table>
</div>
</div><p>In the output the CNI version is set to 1.0.0 which is wrong. So we change it to a supported version such as 0.3.0 :
<code>vim /etc/cni/net.d/10-containerd-net.conflist</code></p>
<p>To be safe, restart the containerd service after after configuring the CNI plugins:
`systemctl restart containerd</p>
<h4 id="kubelet">Kubelet</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="p">|</span> sudo apt-key add -
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb https://apt.kubernetes.io/ kubernetes-xenial main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/kubernetes.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt -y install kubelet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Then replace the binary:
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/elchead/kubernetes/releases/download/v8.1.0/kubelet
</span></span><span class="line"><span class="cl">chmod +x ./kubelet
</span></span><span class="line"><span class="cl">cp ./kubelet /usr/bin
</span></span></code></pre></td></tr></table>
</div>
</div><p>Modify the systemd service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
</span></span><span class="line"><span class="cl"><span class="c1"># Note: This dropin only works with kubeadm and kubelet v1.11+</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Environment</span><span class="o">=</span><span class="s2">&#34;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">Environment</span><span class="o">=</span><span class="s2">&#34;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># This is a file that &#34;kubeadm init&#34; and &#34;kubeadm join&#34; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span>
</span></span><span class="line"><span class="cl"><span class="nv">EnvironmentFile</span><span class="o">=</span>-/var/lib/kubelet/kubeadm-flags.env
</span></span><span class="line"><span class="cl"><span class="c1"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span>
</span></span><span class="line"><span class="cl"><span class="c1"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span>
</span></span><span class="line"><span class="cl"><span class="nv">EnvironmentFile</span><span class="o">=</span>-/etc/default/kubelet
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/kubelet <span class="nv">$KUBELET_KUBECONFIG_ARGS</span> <span class="nv">$KUBELET_CONFIG_ARGS</span> <span class="nv">$KUBELET_KUBEADM_ARGS</span> <span class="nv">$KUBELET_EXTRA_ARGS</span> --container-runtime-endpoint<span class="o">=</span>/run/containerd/containerd.sock --v<span class="o">=</span><span class="m">9</span> --read-only-port<span class="o">=</span><span class="m">0</span> --anonymous-auth<span class="o">=</span><span class="nb">true</span> --authorization-mode<span class="o">=</span>AlwaysAllow --container-runtime<span class="o">=</span>remote
</span></span><span class="line"><span class="cl">~
</span></span></code></pre></td></tr></table>
</div>
</div><p>The kubelet config should look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">cat /var/lib/kubelet/config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubelet.config.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">authentication</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">anonymous</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">webhook</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cacheTTL</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">x509</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">clientCAFile</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/kubernetes/pki/ca.crt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">authorization</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">Webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">webhook</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cacheAuthorizedTTL</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cacheUnauthorizedTTL</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusterDNS</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="m">10.96.0.10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusterDomain</span><span class="p">:</span><span class="w"> </span><span class="l">cluster.local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cpuManagerReconcilePeriod</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">evictionPressureTransitionPeriod</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">fileCheckFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">healthzBindAddress</span><span class="p">:</span><span class="w"> </span><span class="m">127.0.0.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">healthzPort</span><span class="p">:</span><span class="w"> </span><span class="m">10248</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">httpCheckFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imageMinimumGCAge</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">KubeletConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeStatusReportFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeStatusUpdateFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">resolvConf</span><span class="p">:</span><span class="w"> </span><span class="l">/run/systemd/resolve/resolv.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rotateCertificates</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">runtimeRequestTimeout</span><span class="p">:</span><span class="w"> </span><span class="l">50m0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">staticPodPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/kubernetes/manifests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">streamingConnectionIdleTimeout</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">syncFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumeStatsAggPeriod</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s important to set the <code>runtimeRequestTimeout</code> to a higher value (default is 2 minutes), if you intend to migrate big containers (~50GB+)!</p>
<h4 id="kubeadm-1">Kubeadm</h4>
<p>Install as above for the master node:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wget https://github.com/elchead/kubernetes/releases/download/v8.1.0/kubeadm
</span></span><span class="line"><span class="cl">chmod +x ./kubeadm
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="4-kubernetes-bootstrapping">4. Kubernetes bootstrapping</h2>
<h3 id="networking">Networking</h3>
<p>First, we set up the networking and containerd.
I followed <a href="https://blog.nillsf.com/index.php/2021/10/29/setting-up-kubernetes-on-azure-using-kubeadm/" target="_blank" rel="noopener noreffer">this tutorial</a>, but it might not be necessary:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf
</span></span></span><span class="line"><span class="cl"><span class="s">overlay
</span></span></span><span class="line"><span class="cl"><span class="s">br_netfilter
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo modprobe overlay
</span></span><span class="line"><span class="cl">sudo modprobe br_netfilter
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Setup required sysctl params, these persist across reboots.</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-iptables  = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.ip_forward                 = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Apply sysctl params without reboot</span>
</span></span><span class="line"><span class="cl">sudo sysctl --system
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo mkdir -p /etc/containerd
</span></span><span class="line"><span class="cl">containerd config default <span class="p">|</span> sudo tee /etc/containerd/config.toml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl restart containerd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
</span></span></span><span class="line"><span class="cl"><span class="s">br_netfilter
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-iptables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">sudo sysctl --system
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="kubeadm-init">Kubeadm init</h3>
<p>On the master node, create a config file in your home directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim conf.yaml
</span></span><span class="line"><span class="cl">apiServer:
</span></span><span class="line"><span class="cl">  timeoutForControlPlane: 4m0s
</span></span><span class="line"><span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
</span></span><span class="line"><span class="cl">imageRepository: sadrian99
</span></span><span class="line"><span class="cl">kind: ClusterConfiguration
</span></span><span class="line"><span class="cl">kubernetesVersion: v1.19.16
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
</span></span><span class="line"><span class="cl">kind: InitConfiguration
</span></span><span class="line"><span class="cl">nodeRegistration:
</span></span><span class="line"><span class="cl">  criSocket: <span class="s2">&#34;/run/containerd/containerd.sock&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Through this, the registry with the customized Kubernetes components will be used.</p>
<p>Then, start the cluster with:
<code>./kubeadm init --upload-certs --cri-socket &quot;/run/containerd/containerd.sock&quot; --config conf.yaml</code></p>
<p>Note: Ideally, the cluster is exposed with a DNS endpoint, but this did not work for me!</p>
<p>As the output indicates, perform:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p <span class="nv">$HOME</span>/.kube
</span></span><span class="line"><span class="cl">sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, copy the output to join the cluster on a worker node. It looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm join 192.168.0.7:6443 --token 90djfo.2386gkxicg6y2ywo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --discovery-token-ca-cert-hash sha256:0834d5d47c16799e2b1b4df3431923570549fe903f9339f875dd1f2f9d2dd2ef
</span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, set up CNI:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f <span class="s2">&#34;https://cloud.weave.works/k8s/net?k8s-version=1.19&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="verify-cluster-state">Verify cluster state</h3>
<p><code>kubectl get node -w</code>
Should show a ready node after a few seconds.</p>
<p><code>kubectl get po -A</code>
Should show all pods running (including coredns!).</p>
<h3 id="debugging">(Debugging)</h3>
<p>If the node does not get ready, check the logs of the kubelet:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">journalctl -u kubelet [-f]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Or if you don&rsquo;t find any hints from there, look here:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">journalctl -u  containerd [-f]
</span></span></code></pre></td></tr></table>
</div>
</div><p>It happened to me, that I got the error <code>cni plugin not initialized</code>.
If this is the case, be sure to repeat step the CNI plugin installation from above again.</p>
<p>If a pod is not running, use <code>kubectl describe</code> to debug.</p>
<p>Otherwise, a cluster reset might also help:
<code>./kubeadm reset --cri-socket &quot;/run/containerd/containerd.sock&quot;</code></p>
<h3 id="join-worker">Join worker</h3>
<p>Install crictl as prequisite:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">VERSION=&#34;v1.23.0&#34;
</span></span><span class="line"><span class="cl">wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
</span></span><span class="line"><span class="cl">sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
</span></span><span class="line"><span class="cl">rm -f crictl-$VERSION-linux-amd64.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><p>On the worker node, run the previously copied join command.
You might need to add <code>--cri-socket &quot;/run/containerd/containerd.sock&quot;</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">./kubeadm join 192.168.0.7:6443 --token 90djfo.2386gkxicg6y2ywo     --discovery-token-ca-cert-hash sha256:0834d5d47c16799e2b1b4df3431923570549fe903f9339f875dd1f2f9d2dd2ef --cri-socket &#34;/run/containerd/containerd.sock&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>To verify, go back to the master node and check that the new node appears ready.</p>
<h3 id="copy-kubeconfig">Copy kubeconfig</h3>
<p>Now, copy the kubeconfig from the master node (<code>$HOME/.kube/config</code>) to the worker node inside <code>config</code> and export it:
<code>export KUBECONFIG=$HOME/config</code></p>
<p>The migration PoC needs the kubeconfig inside a special directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkdir -p /var/lib/kubelet
</span></span><span class="line"><span class="cl">cp $HOME/config /var/lib/kubelet/kubeconfig
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="5-demo-test-migration">5. Demo (test migration)</h2>
<h3 id="deploy-stateful-pod">Deploy stateful pod</h3>
<p>Now it&rsquo;s time to test the migration, with a simple memory allocating pod (here 50 MB):
<code>kubectl run counter1 --restart=Never --image &quot;ghcr.io/schrej/podmigration-testapp:latest&quot; -- -m 50</code>. It&rsquo;s important to set <code>restartPolicy:Never</code> to prevent the original container from restarting during migration (relevant for large migrations)!</p>
<p>Through <code>kubectl get po -owide</code>, you can get pod IP and increment a stateful counter.
Be sure to do this on the worker node:
<code>curl $POD_IP:8080</code>
Repeat the counter increment a few times, to validate the successful migration later.</p>
<h3 id="clone-pod">Clone pod</h3>
<p>The pod spec is identical, except that it has an additional field <code>spec.clonePod</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">creationTimestamp</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">counter1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mcounter1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clonePod</span><span class="p">:</span><span class="w"> </span><span class="l">counter1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- -<span class="l">m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="s2">&#34;50&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">ghcr.io/schrej/podmigration-testapp:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">counter1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterFirst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The migration should be very fast.
Currently, the old pod gets broken during the migration. But the cloned pod should be running.
Requesting it&rsquo;s endpoint with <code>curl</code> should return a number bigger than 1. Voila - you have successfully cloned a stateful pod in Kubernetes!</p>
<h2 id="6-set-up-file-server">6. Set up file server</h2>
<h3 id="important-warning">Important warning</h3>
<p>I had consistency problems for bigger file uploads with SMB. The container restore command is issued 1 second after the disk checkpoint has been saved completely.
However, at this time not all files of the checkpoint directory were uploaded successfully.</p>
<p>I circumvented this problem by storing the checkpoint on local disk and only storing a zipped archive on the server.
The temporary local-disk location is <code>/var/lib/kubelet/check</code>. Since, the OS disk is usually only 30GB, you will need to create a symbolic link to a bigger disk. In my case, a temporary disk with 500GB was mounted in <code>/mnt</code>.
To solve this, do:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">rm -r /var/lib/kubelet/check/
</span></span><span class="line"><span class="cl">ln -s /mnt /var/lib/kubelet/check
</span></span></code></pre></td></tr></table>
</div>
</div><p>Interestingly, the compression immensly reduced the checkpoint size for the simple example app. For 50GB of allocated memory, the compressed zip was only around 20MB!
This modification was done inside containerd in the branch <code>checkpoint-zip</code>.</p>
<h3 id="steps">Steps</h3>
<p>The procedure is specific to Azure and is well documented <a href="https://docs.microsoft.com/en-us/azure/storage/files/storage-how-to-use-files-linux?tabs=smb311" target="_blank" rel="noopener noreffer">here</a>. The server should be mounted inside <code>/var/libe/kubelet/migration</code>. I used the static mount and my /etc/fstab entry looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//SERVER_URL/checkpoints /var/lib/kubelet/migration cifs nofail,credentials=/etc/smbcredentials/STORAGECLASSNAME.cred,serverino,cache=none
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="development">Development</h2>
<p>If you want to develop further or quickly test changes, it is much easier to work with a local cluster.
Inside the kubernetes repo root, run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">CONTAINER_RUNTIME=remote CONTAINER_RUNTIME_ENDPOINT=&#34;unix:///run/containerd/containerd.sock&#34; CGROUP_DRIVER=&#34;systemd&#34; KUBELET_AUTHORIZATION_WEBHOOK=&#34;false&#34; KUBELET_FLAGS=&#34;--read-only-port=0 --anonymous-auth=true --authorization-mode=AlwaysAllow&#34; ./hack/local-up-cluster.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>To read the logs for the kubelet, you can use: <code>tail -f /tmp/kubelet.log</code>.</p>
<h2 id="end">End</h2>
<p>I admit that this was a long tutorial and it&rsquo;s likely not everything went smooth while following along. If you are stuck at some step, you can contact me and I can try to help :)</p>
]]></description></item><item><title>[Tutorial]: K8s Monitoring with InfluxDB's Telegraf</title><link>https://adrianstobbe.com/posts/k8s-monitoring-with-influx-telegraf/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/k8s-monitoring-with-influx-telegraf/</guid><description><![CDATA[<p>InfluxDB is an Open-Source timeseries database which can be used for monitoring Kubernetes clusters.
In this tutorial, I want to show you step by step how to get a dashboard with metrics on Kuberntes resource usage of podes and nodes. It&rsquo;s not difficult, but the official documentation is outdated and confusing, so I hope to make it easier for you.
We will use InfluxDB2 which includes a nice dashboard and supports the Flux QL query language.</p>
<h3 id="1-download-helm-chart-repohttpsgithubcominfluxdatahelm-charts-and-add-to-helm">1. Download <a href="https://github.com/influxdata/helm-charts" target="_blank" rel="noopener noreffer">helm chart repo</a> and add to helm:</h3>
<pre><code>helm repo add influxdata https://helm.influxdata.com/
</code></pre>
<h3 id="2-deploy-influxdb2">2. Deploy Influxdb2</h3>
<p>No settings need to be adjusted:</p>
<p><code>helm upgrade --install influx2 influxdata/influxdb2</code></p>
<p>But you should note down the password for the admin user:</p>
<p><code>echo $(kubectl get secret influx2-influxdb2-auth -o &quot;jsonpath={.data['admin-password']}&quot; --namespace tick | base64 --decode)</code></p>
<p>To open the Influx UI, do:</p>
<p><code>kubectl port-forward svc/influx2-influxdb2 8081:80</code></p>
<p>Now, you can open <code>localhost:8081</code> and log in with user: admin and the before copied password.</p>
<h3 id="3-add-telegraf-configuration-in-influxdb">3. Add Telegraf Configuration in Influxdb</h3>
<p>In the UI sidebar, click <code>Data</code> and add &ldquo;Telegraf Configuration&rdquo;. Choose Kubernetes and enter a name: (e.g <code>telegraf</code>).
Then, copy the API token.</p>
<h3 id="4-deploy-telegraf">4. Deploy Telegraf</h3>
<p>We choose the Daemonset <code>telegraf-ds</code>, because it is expected for the <code>Kuberntes input</code> plugin, which among many others observes the node and pod resources.
Now open the <code>values.yaml</code> and add the following information under <code>config.outputs</code>:</p>
<pre><code>    - influxdb_v2:
        urls:
          - &quot;http://influx2-influxdb2.tick.svc&quot;
        token: INSERT_TOKEN
        organization: &quot;influxdata&quot;
        bucket: &quot;default&quot;
</code></pre>
<p>The input plugins are configured by default.</p>
<p>Then deploy the chart:</p>
<pre><code>helm upgrade --install ds-telegraf influxdata/telegraf-ds -f values.yaml
</code></pre>
<h3 id="5-view-metrics-data">5. View metrics data</h3>
<p>If all went well, you should now receive metrics data and see them in the UI under <code>Explore</code>:</p>
<p>




</p>
<h3 id="6-connect-local-client-with-db">6. Connect local client with DB</h3>
<p>If you want to query the DB through a locally installed CLI client or their Go-client, you can use the port-forwarding from earlier and use this adress to connect:
<code>kubectl port-forward svc/influx2-influxdb2 8081:80</code>.</p>
<p>This step was not so intuitive to me, because in InfluxDb 1 the service exposed the 8086 port for this. But now the UI and the database connection are both reachable through this port.</p>
<p>To test the connection with the CLI you can use:</p>
<p><code>influx ping --host http://localhost:8081</code></p>
<p>This is all there is to it. If you have any questions or find that my tutorial got outdated, please contact me :)</p>
]]></description></item><item><title>Testable code has few mocks</title><link>https://adrianstobbe.com/posts/js-testing/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/js-testing/</guid><description><![CDATA[<p>Testing can sometimes seem hard and tedious. We might be faced with complex setup logic and many mocks. But this is a smell of poor code design. When properly done, mocks are rarely needed. TDD helps to avoid tight coupling and it naturally tends towards functional code. In this post, I cover how the functional style leads to less error prone code and fewer code to be tested. Moreover, we will explore when it is proper to use mocks.</p>
<h2 id="integration-vs-operation">Integration vs Operation</h2>
<p>When solving a problem the process is always to break it up into smaller pieces. The problem solution is then just the composition of the smaller units. So we define functions for each subproblem and one integration function to solve the big problem. There should be a clear distinction between operation and integration (also see <a href="https://clean-code-developer.com/grades/grade-1-red/#Integration_Operation_Segregation_Principle_IOSP" target="_blank" rel="noopener noreffer">Integration Operation Segregation Principle</a>).
Each small unit should be independent, i.e. unaware of the other parts in the composition.</p>
<blockquote>
<p>Mocking is required when our decomposition strategy has failed, Eric Elliott</p>
</blockquote>
<h2 id="function-composition">Function composition</h2>
<p>What was new to me is that composing functions do not need to be unit tested when they are truly independent. Because in such case we can use a generic composition utility.</p>
<p>Let&rsquo;s look at an example<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The imperative and obvious solution to integrate is this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Imperative composition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">composition</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">afterG</span> <span class="o">=</span> <span class="nx">g</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">afterF</span> <span class="o">=</span> <span class="nx">f</span><span class="p">(</span><span class="nx">afterG</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">afterF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In languages without first-class functions, there might be no way around this. But in most popular languages, such as JavaScript, you can do better. Function composition is declarative and avoids bugs such as passing or returning the wrong variable.</p>
<p>For the declarative composition, you can either define your own pipe (which could be error-prone) or use a library<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// import pipe from &#39;lodash/fp/flow&#39;;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">pipe</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">fns</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">fns</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">y</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="nx">y</span><span class="p">),</span> <span class="nx">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Functions to compose
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">g</span> <span class="o">=</span> <span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Declarative composition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">doStuffBetter</span> <span class="o">=</span> <span class="nx">pipe</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span> <span class="nx">f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">doStuffBetter</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="c1">// 42
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Note that <code>reduce</code> applies the accumulator on each value from left to right! There is also a reverse variant called <code>reduceRight</code>. This reduction would have given 41 as result.</p>
<p>Commonly, we have asynchronous calls in our code, but we can also compose promises! I think this is also where it really pays off - when you compose calls with side effects. Unit testing the integration function becomes tedious, because we need to stub all participants<sup id="fnref2:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// imperative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">async</span> <span class="kd">function</span> <span class="nx">uploadFiles</span><span class="p">({</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">folder</span><span class="p">,</span> <span class="nx">files</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">dbUser</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">readUser</span><span class="p">({</span> <span class="nx">user</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">folderInfo</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">getFolderInfo</span><span class="p">({</span> <span class="nx">folder</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="kr">await</span> <span class="nx">haveWriteAccess</span><span class="p">({</span> <span class="nx">dbUser</span><span class="p">,</span> <span class="nx">folderInfo</span> <span class="p">}))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">uploadToFolder</span><span class="p">({</span> <span class="nx">dbUser</span><span class="p">,</span> <span class="nx">folderInfo</span><span class="p">,</span> <span class="nx">files</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;No write access to that folder&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// declarative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">asyncPipe</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="p">(...</span><span class="nx">fns</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fns</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kr">async</span> <span class="p">(</span><span class="nx">y</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="kr">await</span> <span class="nx">y</span><span class="p">),</span> <span class="nx">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">uploadFiles</span> <span class="o">=</span> <span class="nx">asyncPipe</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">readUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFolderInfo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">haveWriteAccess</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">uploadToFolder</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">uploadFiles</span><span class="p">({</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">folder</span><span class="p">,</span> <span class="nx">files</span> <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">log</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you see, the declarative <code>uploadFiles</code> function is just a function call - no logic to be tested! The correctness of the step order is not assured, but in most cases this is covered in integration tests. If it&rsquo;s complex logic, you might still write a unit test to test the correct step order of the composition.</p>
<p>I agree that the declarative implementation (<code>asyncPipe</code>) is more difficult to understand at first, but it is less error prone and more concise. <code>asyncPipe</code> is given an array of functions that it reduces. <code>y</code> is the previous result and we apply <code>f</code> on it&rsquo;s result. The second return value <code>x</code> is the initial value. This syntax confused me a bit, but the initial value obviously needs to be provided at some place. This is functional programming!</p>
<h2 id="the-merits-of-functional-programming">The merits of Functional Programming</h2>
<p>The paradigm leads to code that is easier to test, because it is a stateless input / output machine. Moreover, it leaves less room for bugs, because you only declare what you want to perform instead of how to do it (imperative). However, it&rsquo;s not possible to only rely on functional programming, because applications are stateful and have side effects (network requests, file operations, logging&hellip;).
A good strategy is to keep the business logic functional and move side effects to the outer boundary.</p>
<p>Let&rsquo;s consider the example of an online shop that decides to give some premium benefits to its loyal customers. Premium customers might benefit from special discounts and free shipping so we want to update their status in the database.
On the other hand, we might want to reach out to the inactive customers. The status of our customer is clearly business logic and it should not be mixed with database logic.
One approach would be to pass a database interface and mock it in the test.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">updateCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">,</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">isLoyalCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">.</span><span class="nx">date</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntry</span> <span class="o">=</span> <span class="p">{</span><span class="nx">premium</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">entry</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nx">UpdateEntry</span><span class="p">(</span><span class="nx">newEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">isInactiveCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">.</span><span class="nx">date</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntry</span> <span class="o">=</span> <span class="p">{</span><span class="nx">inactive</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">entry</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">db</span><span class="p">.</span><span class="nx">UpdateEntry</span><span class="p">(</span><span class="nx">newEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>But there is a better approach that is declarative and easier to test:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">updateCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">isLoyalCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">.</span><span class="nx">date</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntry</span> <span class="o">=</span> <span class="p">{</span><span class="nx">premium</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">entry</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="nx">FileUpdate</span><span class="p">(</span><span class="nx">newEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">isInactiveCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">.</span><span class="nx">date</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntry</span> <span class="o">=</span> <span class="p">{</span><span class="nx">inactive</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">entry</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="nx">FileUpdate</span><span class="p">(</span><span class="nx">newEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="k">new</span> <span class="nx">NoUpdate</span><span class="p">(</span><span class="nx">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s clearer in the intent that the output is a return value instead of an input value with side effects. Also, there is no need to mock!
Of course there is still a missing piece for this variant - the mutable shell that applies the side effects.
In our case, there would be a <code>Persister</code>, which is a database wrapper that reads the update instructions. It&rsquo;s correctness would be covered in the integration test.</p>
<h2 id="when-to-use-mocks">When to use mocks</h2>
<p>Be aware that mocks are sometimes the only way to test logic. But think what exactly needs to be tested. For testing the request handler of our express app, it&rsquo;s not necessary to create a mockserver. We only want to test the handler logic. Express logic to create the server with port allocation etc. does not need to be tested by us!</p>
<p>I find the distinction between handlers and servers especially clear in Golang:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">handler</span> <span class="o">:=</span> <span class="nf">newHelloHandler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">request</span> <span class="o">:=</span> <span class="nf">newRequest</span><span class="p">(</span><span class="s">&#34;Floyd&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">response</span> <span class="o">:=</span> <span class="nx">httptest</span><span class="p">.</span><span class="nf">NewRecorder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nf">assertStatus</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Code</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nf">assertResponseBody</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="s">&#34;Hello Floyd&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The handler object includes all logic how to process requests, so we can use it to test the correct behavior. Note how only the response needs to be mocked (spied to be precise).</p>
<p>In Express.js, we do the same. We test the handler function and spy the response object.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">const helloHandler  = (req, res) =&gt; res.send(&#39;Hello World!&#39;);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">const expected = &#39;Hello World!&#39;;
</span></span><span class="line"><span class="cl">const resSpy = {
</span></span><span class="line"><span class="cl">	send: (actual) =&gt; assert.Equal(actual,expected)
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">hello({}, resSpy);
</span></span></code></pre></td></tr></table>
</div>
</div><p>The request handler is at the outer layer of our application, i.e. it connects with external dependencies to cause side effects. In our case the external dependency is the response object which makes a network call. In that case it is justified and necessary to mock. The general guideline is to only mock external dependencies.</p>
<h2 id="conclusion">Conclusion</h2>
<p>By pushing the side effects to the outer layer of the application, we can mostly avoid mocks. Functional code is easy to test and allows to use function composition. This reduces the surface for bugs and saves us to write unit tests for integration functions.
Mocks have its place, but if it&rsquo;s not an external dependency it might be code smell.</p>
<p>If you want to learn more about testing, I can highly recommend <a href="https://www.manning.com/books/unit-testing" target="_blank" rel="noopener noreffer">Unit Testing Principles, Practices, and Patterns</a>.</p>
<div id="reachout-callout">
    <div>💙</div>
      <div id="callout-inner">
      If you have any additional thoughts, feedback or you think I got something wrong, I&#39;d like to hear from you!
      You can reach me through <a href='mailto:stobbe.adrian@gmail.com'>Email</a> or <a href='https://twitter.com/astobbe_'>Twitter</a>
    </div>
  </div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>adopted from <a href="https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a" target="_blank" rel="noopener noreffer">Source</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item><item><title>Tools and shortcuts for MacOS</title><link>https://adrianstobbe.com/posts/tools-mac/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/tools-mac/</guid><description><![CDATA[<p>After many years of Windows, I switched to MacOS this year - with no regrets. Besides the big plus of being UNIX-based, I got to appreciate the user-friendliness and smooth integrations with the iPad. My favourites are using the iPad as an external sreen, Airdrop, signing documents and continuity.</p>
<p>But the system switch, also made me find new ways to interact with it. In the following I want to show a few tools and shortcuts that optimize my workflow on the Mac:</p>
<h2 id="tools">Tools</h2>
<h3 id="rectanglehttpsgithubcomrxhansonrectangle"><a href="https://github.com/rxhanson/Rectangle" target="_blank" rel="noopener noreffer">Rectangle</a>:</h3>
<p>An OSS window management tool. I use it to split windows and move them between displays with shortcuts.</p>
<h3 id="alfredhttpswwwalfredappcom"><a href="https://www.alfredapp.com/" target="_blank" rel="noopener noreffer">Alfred</a></h3>
<p>Besides Apples Spotlight, it provides great features like:</p>
<ul>
<li>find file  by prepending <code>'</code></li>
<li>see matching bookmark results</li>
<li>clipboard history (<code>Cmd+Alt+c</code>)</li>
<li>text expander: insert frequently used snippets through a keyword</li>
<li>web search:
<ul>
<li><code>gmp</code>:  Google Maps</li>
<li><code>gm</code> Gmail</li>
<li><code>drv</code>: Google Drive</li>
<li><code>yt</code>: YouTube</li>
<li><code>wiki</code>: Wikipedia</li>
<li><code>weather</code>: Weather forecast</li>
</ul>
</li>
</ul>
<p><strong>Workflows (premium)</strong>
Despite the rather high price tag, I think that it&rsquo;s a worthy investment:</p>
<ul>
<li><strong>Bitwarden:</strong> simply type <code>.bw</code> to access and copy credentials. Very useful for programs outside the browser.</li>
<li>**Spotify: **I use it mainly to choose music, but you can also add songs to playlists etc. I set up a separate shortcut for spotify context (<code>Ctrl+Cmd+s</code>).</li>
<li><strong>Google:</strong> get search suggestions:<code>g</code></li>
<li><strong>Obisidian:</strong>
<ul>
<li><code>os</code>: search markdown files</li>
<li><code>odi</code>: append to daily note</li>
</ul>
</li>
</ul>
<h3 id="monitorcontrolhttpsgithubcommonitorcontrolmonitorcontrol"><a href="https://github.com/MonitorControl/MonitorControl" target="_blank" rel="noopener noreffer">MonitorControl</a></h3>
<p>An OSS tool to control the brightness of external monitors using the native keyboard keys or automatic brightness using the dim-sensor.</p>
<h3 id="dozerhttpsgithubcommortennndozer"><a href="https://github.com/Mortennn/Dozer" target="_blank" rel="noopener noreffer">Dozer</a></h3>
<p>An OSS tool to declutter the menubar. It lets you hide a desired portion of the menubar icons on a hotkey.  Great for focus :)</p>
<p>As you see, I am an advocate of Open-Source tools, and there is a great compilation on <a href="https://github.com/serhii-londar/open-source-mac-os-apps#menubar" target="_blank" rel="noopener noreffer">Github</a>. I also like <a href="https://github.com/sozercan/OpenInCode" target="_blank" rel="noopener noreffer">this plugin</a> to open vscode inside the Finder.</p>
<h2 id="system-shortcuts">System shortcuts</h2>
<p>You can set up your own shortcuts in the settings under <code>Keyboard -&gt; Shortcuts -&gt; App Shortcuts</code>. I use these frequently:</p>
<ul>
<li>
<p><code>Cmd+Shift+i</code>: Move screen to iPad</p>
</li>
<li>
<p><code>Cmd+Shift+o</code>: Share via AirDrop</p>
</li>
</ul>
<p>Other useful system shortcuts include:</p>
<ul>
<li>
<p><code>Cmd+Opt+h</code>: Hide all other apps</p>
</li>
<li>
<p><code>Cmd+o</code>: Open file</p>
</li>
<li>
<p><code>Cmd+t</code>: Open tab</p>
</li>
<li>
<p><code>Cmd+Opt+w</code>: Close all windows</p>
</li>
<li>
<p><code>Shift+Cmd+5</code>: Take screenshot or make recording, <code>+3</code> for whole screen, <code>+4</code> for portion</p>
</li>
<li>
<p><code>Opt+Sound</code>: Open sound settings</p>
</li>
<li>
<p><code>Opt+double-click</code>: Open the item in a separate window, then close the original window.</p>
</li>
<li>
<p><code>Opt+drag</code>: Copy the dragged item. The pointer changes while you drag the item.</p>
</li>
<li>
<p><code>Cmd+drag</code> to another volume: Move the dragged item to the other volume, instead of copying it.</p>
</li>
<li>
<p><code>Opt+Cmd</code> while dragging: Make an alias of the dragged item. The pointer changes while you drag the item.</p>
</li>
<li>
<p><code>Cmd + Shift + .</code>: Show hidden files</p>
</li>
<li>
<p><code>Cmd+d</code>: Duplicate selected files</p>
</li>
<li>
<p><code>Shift+Cmd+o</code>: Open documents</p>
</li>
<li>
<p><code>Alt+Cmd+l</code>: Open downloads</p>
</li>
</ul>
<style>
  #callout {
    background: #ececec;
     

    padding: 1.5em 1.25em;
    border-radius: 3px;
    display: flex;
    flex-direction: row;
    margin-bottom: 20px;
  }
  #callout-inner {
    margin-left: 1em;
  }
  @media (max-width: 767px) {
    #callout {
      padding: 1.5em 0.75em 1.5em 0.6em;
    }
    #callout-inner {
      margin-left: 0.5em;
    }
  }
</style>

<div id="callout">
  <div>👨‍💻</div>
  <div id="callout-inner">I hope you found some useful new trick. If you have something to share that I missed, I&#39;d be happy if you&#39;d reach out on Twitter or via Email!</div>
</div>

]]></description></item><item><title>Unix cheatsheet - Beyond the basics</title><link>https://adrianstobbe.com/posts/unix-cheatsheet/</link><pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/unix-cheatsheet/</guid><description><![CDATA[<p>We developers use the terminal a lot and there are a lot of tricks that can ease our work. So it&rsquo;s worth looking beyond the essentials of getting stuff done in the shell! The quickest way to find what you need is probably to use <a href="https://tldr.sh/" target="_blank" rel="noopener noreffer"><code>tldr</code></a>. But the frequently used hacks are best learned once to know about all the good stuff and work effectively. I recently found the great <a href="https://www.freecodecamp.org/news/the-linux-commands-handbook/#the-linux-ls-command" target="_blank" rel="noopener noreffer">The Linux Command Handbook</a> from Freecodecamp and went over it to extract the useful bites that I didn&rsquo;t know.</p>
<p>So, here they are:</p>
<h2 id="files">Files</h2>
<h3 id="cp">cp</h3>
<p><code>-v</code>: verbose</p>
<h3 id="mkdir">mkdir</h3>
<p><code>-p</code>: create multiple nested folders</p>
<h3 id="rmdir">rmdir</h3>
<p>delete empty dir. Saver than (<code>rm -rf</code>). But best to use <a href="https://hasseg.org/trash/" target="_blank" rel="noopener noreffer"><code>trash</code></a></p>
<h3 id="ls">ls</h3>
<p><code>-h</code>: human readable file sizes (M,K&hellip;)</p>
<h3 id="ln">ln</h3>
<p>the default is a hard link.</p>
<p>Hard link: points to content linked at time of linkage (does copy)</p>
<p>Soft link: pointer to the original file. Breaks when original is moved.</p>
<p><code>-s original symlink</code>: soft link</p>
<h3 id="gzip">gzip</h3>
<p>compress SINGLE file. By default the original file is removed.</p>
<p><code>-k</code>: keep original file
<code>-d</code>: unzip or <code>gunzip</code>
<code>-v</code>: verbose info on saved storage percentage</p>
<h3 id="tar">tar</h3>
<p>gather multiple files (uncompressed)</p>
<p><code>-cf archive.tar FILES...</code>: create archive</p>
<p><code>-czf archive.tar.gz</code>: tar and zip</p>
<p><code>-xf archive.tar.gz -C directory</code>: extract (potentially zipped) archive to specified directory.</p>
<p><code>-tf archive.tar</code>: show files without extracting</p>
<h3 id="xargs">xargs</h3>
<p>take output and turn into arguments for other command.
This is especially useful for commands that don&rsquo;t accept <code>stdin</code> (e.g. <code>touch</code>,<code>rm</code>,<code>ls</code>)</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat listFiles.txt <span class="p">|</span> xargs rm
</span></span></code></pre></td></tr></table>
</div>
</div><p>For <code>find</code> use <code>-print0 | xargs -0</code> to properly split the matching files</p>
<p><code>-p</code>: print conformation prompt</p>
<p><code>sh -c &quot;command1 &amp;&amp; command2 | command3&quot;</code>: run multiple commands</p>
<p><code>-I _ command _ optional_extra_arguments</code>: put output into <code>_</code> placeholder</p>
<h2 id="view">View</h2>
<h3 id="cat">cat</h3>
<p>concatenate / print intput</p>
<p><code>-n</code>: see line number</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat file1 file2 &gt;&gt; file3
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tail">tail</h3>
<p>open the file at the end</p>
<p><code>-f</code>: (follow) watch for changes</p>
<p><code>-n 10</code>: print last 10 lines</p>
<h3 id="less">less</h3>
<p>view file inside interactive UI</p>
<p><code>space</code>: navigate down one page</p>
<p><code>b</code>: navigate up one page</p>
<p>navigation similar to vim</p>
<p><code>v</code>: open in default system editor (vim)</p>
<p><code>F</code>: follow mode (see changes live)</p>
<p><code>:n</code>: open next file (for multiple input files)</p>
<p><code>:p</code>: open previous file</p>
<h3 id="nano">nano</h3>
<p><code>ctrl+s</code>: save</p>
<p><code>ctrl+x</code>: quit</p>
<p>for all the rest, use <code>vim</code> 😛</p>
<h2 id="extract">Extract</h2>
<h3 id="tr">tr</h3>
<p>translate / delete character in a file:</p>
<p><code>tr find_character replace_character &lt; filename</code>
<code>-d</code>: delete occurences of character</p>
<h3 id="cut">cut</h3>
<p>cut given character from file</p>
<p><code>-c 5-10</code>: cut character nbr 5 to 10 from each line
<code>-d &quot;,&quot; -f 2,6</code>: extract the second and sixth <code>,</code> delimited field from each line</p>
<h3 id="grep">grep</h3>
<p>extract information (supports regex)</p>
<p><code>-n</code>: show line numbers</p>
<p><code>-C 2</code>: show 2 lines before and after match</p>
<p><code>-i</code>: ignore case</p>
<p><code>-v</code>: invert search (exclude all matches)</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -n document.getElementById index.md
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find">find</h3>
<p>find files relative to directory</p>
<p><code>. -name '*.js'</code>: find js files relative to current directory</p>
<p><code>-type</code>: type can be <code>f</code> (file), <code>l</code>(link),<code>d</code>(dir)</p>
<p><code>-mtime -1</code>: match all files modified within 1 day</p>
<p><code>find folder1 folder2</code>: can provide mutiple search directories</p>
<p><code>-or</code>: or condition</p>
<p><code>-delete</code>: deletes matches</p>
<p><code>-exec</code>: execute command on each result</p>
<h3 id="wc">wc</h3>
<p><code>-l</code>: just count lines</p>
<p><code>-w</code>: just count words</p>
<h3 id="uniq">uniq</h3>
<p>output unique lines</p>
<p><code>-c</code>: count occurences</p>
<p>often used with sort (<code>sort -u</code> also filters unique elements):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sort &lt;input&gt; <span class="p">|</span> uniq
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="diff">diff</h3>
<p>compare two files</p>
<p><code>-y</code>: compare next to each other, line by line</p>
<p><code>-u</code>: show differences like in Git</p>
<p><code>-r</code>: (recursively)</p>
<h3 id="basename">basename</h3>
<p>get last segment of provided path:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">basename /Users/adria/test.txt
</span></span></code></pre></td></tr></table>
</div>
</div><p>returns <code>test.txt</code></p>
<h3 id="dirname">dirname</h3>
<p>provides dirname of path (conjugate of basename)</p>
<h2 id="process">Process</h2>
<h3 id="kill">kill</h3>
<p>kill signals (alternative after <code>/</code>) from softest:</p>
<p><code>-TERM / -15</code>: terminate</p>
<p><code>-HUP / -1</code>: (hang up) process before terminating</p>
<p><code>-KILL / -9</code>: abruptly terminate</p>
<h3 id="killall">killall</h3>
<p><code>killall NAME</code>
kill all processes matching NAME</p>
<h3 id="jobs">jobs</h3>
<p>find all running jobs (including suspended ones)</p>
<h3 id="fg">fg</h3>
<p><code>ctrl+z</code>: suspend process</p>
<p>If only 1 process is suspended, its enough to run <code>fg</code>, otherwise do:</p>
<p><code>fg 2</code>: bring job 2 to foreground (get id from <code>jobs</code>)</p>
<h3 id="bg">bg</h3>
<p>run job in background (like appended <code>&amp;</code> to command). API is same as <code>fg</code></p>
<h3 id="ps">ps</h3>
<p><code>ax</code>: <code>a</code> also shows processes of other users. <code>x</code> shows processes not linked to terminal</p>
<p><code>axww</code>: to prevent cutting of command path</p>
<h3 id="top">top</h3>
<p>display real-time info on resource usage (CPU, memory&hellip;)</p>
<p><code>-o mem</code>: sort by memory usage</p>
<h3 id="nohup">nohup</h3>
<p>let long-lived process run even after disconnect / logout</p>
<p><code>nohup &lt;command&gt;</code></p>
<h3 id="env">env</h3>
<p>run command with variable without setting it in the outer environment (current shell)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">env <span class="nv">USER</span><span class="o">=</span>adria node app.js
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>-i</code>: clear variables from outer environment</p>
<p><code>-u</code>: clear specified variable from command environment</p>
<h2 id="privileges">Privileges</h2>
<h3 id="su--sudo">su / sudo</h3>
<p><code>su - &lt;user&gt;</code>: login to other user&rsquo;s home directory</p>
<p><code>sudo -i</code>: start shell as root</p>
<p><code>sudo -u &lt;user&gt;</code>: run command as other user</p>
<h3 id="chown">chown</h3>
<p>change file ownership</p>
<p><code>chown -R &lt;owner&gt; &lt;dir&gt;</code>: recursively change permissions of all subdirectories</p>
<p><code>chown &lt;owner&gt;:&lt;group&gt;</code>: change group as weell</p>
<p><code>chgrp &lt;group&gt; &lt;file&gt;</code>: change group</p>
<h3 id="chmod">chmod</h3>
<p>change read, write, execute permissions</p>
<p><code>-r</code>: apply recursively</p>
<p><strong>Symbolic usage</strong></p>
<ul>
<li><code>a</code> stands for <em>all</em></li>
<li><code>u</code> stands for <em>user</em></li>
<li><code>g</code> stands for <em>group</em></li>
<li><code>o</code> stands for <em>others</em></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod a+rw filename <span class="c1">#everyone can now read and write</span>
</span></span><span class="line"><span class="cl">chmod og-r filename <span class="c1">#other and group can&#39;t read any more</span>
</span></span><span class="line"><span class="cl"><span class="sb">```</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Numerical usage</strong></p>
<ul>
<li>
<p><code>1</code> if has execution permission</p>
</li>
<li>
<p><code>2</code> if has write permission</p>
</li>
<li>
<p><code>4</code> if has read permission
This gives us 4 combinations:</p>
</li>
<li>
<p><code>0</code> no permissions</p>
</li>
<li>
<p><code>1</code> can execute</p>
</li>
<li>
<p><code>2</code> can write</p>
</li>
<li>
<p><code>3</code> can write, execute</p>
</li>
<li>
<p><code>4</code> can read</p>
</li>
<li>
<p><code>5</code> can read, execute</p>
</li>
<li>
<p><code>6</code> can read, write</p>
</li>
<li>
<p><code>7</code> can read, write and execute</p>
</li>
</ul>
<h2 id="single-vs-double-quotes">Single vs double quotes</h2>
<p><code>&quot;&quot;</code>: resolved at definition time</p>
<p><code>''</code>: resolved at invocation time
An example makes it clearer:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">lsstatic</span><span class="o">=</span><span class="s2">&#34;ls </span><span class="nv">$PWD</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">lscurrent</span><span class="o">=</span><span class="s1">&#39;ls $PWD&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>lscurrent</code> depends on the current directory, whereas static doesn&rsquo;t.</p>
<hr>
<p>Sources:
<a href="https://www.freecodecamp.org/news/the-linux-commands-handbook/#the-linux-ls-command" target="_blank" rel="noopener noreffer">Freecodecamp: The Linux Command Handbook</a>, <a href="https://www.softwaretestinghelp.com/unix-tutorials/" target="_blank" rel="noopener noreffer">Unix Tutorial</a></p>
]]></description></item><item><title>Fixing CSV parsing - First attribute not regonized (BOM)</title><link>https://adrianstobbe.com/posts/csv-parse/</link><pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/csv-parse/</guid><description><![CDATA[<p>Today, I wanted to read a CSV file from Notion and stumbled on the issue that my first attribute was not properly read.
I validated my code on a another file before, but on this file it just didn&rsquo;t work. Turns out that I had the same issue with another npm library. What bothered me was that when printing the object, I could see the attribute, but it had single quotes around it and was printed in green. However, there was no way to access the attribute. Several other attributes with columns including spaces also had this issue. The latter is of course easy to fix by just removing the blank spaces. But what&rsquo;s going on with the first attribute?</p>
<h2 id="the-solution">The solution</h2>
<p>It dawned on me that somehow there were some weird characters at the beginning of the file that I couldn&rsquo;t see.
When parsing the file in python, I could indeed see that.
Indeed, the UTF-8 standard permits a prepended ByteOrderMark (BOM) which can confuse CSV parsers.
Some parsers provide a bom option to deal with this, but the simplest solution is to strip this away in the command line:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sed $&#39;s/\xEF\xBB\xBF//g&#39; file.csv &gt; file.csv
</span></span></code></pre></td></tr></table>
</div>
</div><p>The devil lies in the the details, but next time you and me will be aware that encoding can be subtle and is not easily visible in the editor.</p>
]]></description></item><item><title>CKAD preparation - Tips for the Kubernetes exam</title><link>https://adrianstobbe.com/posts/ckad/</link><pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://adrianstobbe.com/posts/ckad/</guid><description><![CDATA[<p>Recently, I took the Certified Kubernetes Application Developer exam and would like to share some tips for the preparation. Be aware that at the end of September, an updated 2021 version will be released, so contents will change a bit.
Nevertheless, the exam contains 20 questions that need to be completed in 2 hours. So its crucial to be quick and comfortable with the <code>kubectl</code> CLI and formatting yaml files. But first things first:</p>
<h2 id="how-to-get-started">How to get started</h2>
<p>In case you already have experience with Kubernetes for some time, you probably have most of the knowledge required. If you haven&rsquo;t used <code>vim</code> and unix tools before, you should get familiar with the very basics of them.
I started learning about Kubernetes using the official documentation and reading <a href="https://www.oreilly.com/library/view/kubernetes-up-and/9781492046523/" target="_blank" rel="noopener noreffer">Kubernetes Up &amp; Running by Brendan Burns</a>. But if you are new to Kubernetes, then taking a course might also be a good idea.</p>
<p>When I decided to take the exam, I did not quite know what to expect from it, so I took the <a href="https://www.udemy.com/course/ultimate-ckad-certified-kubernetes-application-developer/learn/lecture/26777664?start=270" target="_blank" rel="noopener noreffer">Udemy: Ultimate CKAD course</a> by Srinath Challa.
The course is very basic; so don&rsquo;t expect to learn much new stuff if you know the core topics. But in the end, it gave me more confidence for the exam because it covers all topics and has some preparation material (e.g. bookmarks) and tips.</p>
<h2 id="how-to-prepare">How to prepare</h2>
<p>Once you decide to prepare for the exam, I would recommend signing up for the certificate to get early access to the exam simulator. You should definitely check the available coupons to get a discount on the quite high certificate price of $375! The price includes two coupons for exam simulators at <a href="https://killer.sh/" target="_blank" rel="noopener noreffer">killer.sh</a> (they have the same questions though) and I would take one once you feel comfortable with the topics, but before practicing for the exam. This way you get some feedback on where you are already and what you need to focus on. Be sure to know the &ldquo;exam tips&rdquo; beforehand to get a realistic feel of how you should do it in the real exam.</p>
<h2 id="exam-tips">Exam tips</h2>
<p>The exam is done in a browser environment and you are allowed to have one additional tab (or separate window) for accessing the official documentation. You can use an external monitor for the documentation or separate windows on a large enough screen.</p>
<p>The time frame is short, so you might skip low percentage questions (2-3 %) and do them last. Moreover, shortcuts can help you save time:</p>
<ol>
<li>
<p>Use the CLI as much as possible to get the boilerplate for the yaml files. <code>kubectl run / create</code> are your friends!</p>
</li>
<li>
<p>Configure your bashsrc:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">vim ~/.bashsrc
</span></span><span class="line"><span class="cl">// add:
</span></span><span class="line"><span class="cl">alias k=kubectl
</span></span><span class="line"><span class="cl">alias kaf=&#39;k apply -f&#39;
</span></span><span class="line"><span class="cl">alias kcn=&#39;kubectl config set-context --current --namespace&#39;
</span></span><span class="line"><span class="cl">export d=&#34;--dry-run=client -o yaml&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">source &lt;(kubectl completion bash)
</span></span><span class="line"><span class="cl">complete -F __start_kubectl k
</span></span></code></pre></td></tr></table>
</div>
</div><p>This shortens the syntax and adds bash completion. To get the boilerplate for a pod manifest, you can then simply type <code>k run mypod --image myimage $do &gt; pod.yaml</code>
Be careful, you might have to install bash-completion before:
<code>sudo apt-get install bash-completion</code></p>
</li>
<li>
<p>Configure vim:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Vim ~/.vimrc
</span></span><span class="line"><span class="cl">// add:
</span></span><span class="line"><span class="cl">set tabstop=2 // set tabbing to 2 spaces
</span></span><span class="line"><span class="cl">set shiftwidth=2 // apply tab on multiple lines
</span></span><span class="line"><span class="cl">set expandtab // use spaces for tabs
</span></span></code></pre></td></tr></table>
</div>
</div><p>For debugging, it might also be useful to enable the line numbering: <code>:set number</code></p>
</li>
<li>
<p>Optional: Tmux for multiple terminals</p>
<p>I found the <code>kubectl explain</code> command quite convenient to quickly check the API, while I was writing the yaml file. For this it is however necessary two have 2 terminals. Tmux has different behavior (copying, scrolling &hellip;), so be sure to be familiar with it if you want to use it in the exam.</p>
<p>All commands inside tmux are prepended with <code>Ctrl+b</code>, so I omit that in the following.</p>
<pre><code> tmux
 // inside tmux:
 :set -g mouse on // scroll and click with mouse
 “ // split terminal vertically 
 % // or split horizontally
</code></pre>
<p>For navigation, I used these commands:</p>
<pre><code> ] // paste clipboard 
 ; // toggle last used window
 [ // activate scroll
 x // kill current pane
 &amp; // kill session
 d // detach
 // in the terminal: tmux attach
</code></pre>
</li>
</ol>
<p>Finally, as with most things, it is about practicing and you can find some practicing questions on Google, such as <a href="https://medium.com/bb-tutorials-and-thoughts/practice-enough-with-these-questions-for-the-ckad-exam-2f42d1228552" target="_blank" rel="noopener noreffer">these 150 questions</a>. I hope you found some useful tips and good luck with the exam!</p>
]]></description></item></channel></rss>