<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Adrian's Site</title><link>https://astobbe.me/</link><description>Adrian's Site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 18 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://astobbe.me/index.xml" rel="self" type="application/rss+xml"/><item><title>Challenging the shortsighted me</title><link>https://astobbe.me/posts/shortsighted-me/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/shortsighted-me/</guid><description><![CDATA[<p>Resisting impulses is hard. We all have such impulses:
like mindlessly scrolling social media in the morning, eating junk food, or too many coffee-breaks at work. They can be manifold, but they are so enticing in the moment, because they temptate us with immediate pleasure or stress release.
It&rsquo;s when our primitive, short-term thinking mind tries to get control. In the book &ldquo;Thinking Fast and Slow&rdquo;, Daniel Kahneman describes two modes of thinking:</p>
<ul>
<li>“System 1” = The instant, unconscious, automatic, intuitive thinking.</li>
<li>“System 2” = The slower, conscious, rational, deliberate thinking.</li>
</ul>
<p>The primitive impulses come from System 1 and when we don&rsquo;t deliberately observe ourselves, we follow them.
In short: System 1 is the default, System 2 needs attention.</p>
<h2 id="system-1-in-action">System 1 in action</h2>
<p>It&rsquo;s System 1, when I come home late exhausted from the day and give in to an eating crave. System 2 knows it&rsquo;s bad, but when my energy is low, it becomes hard to think; hard to resist.
It&rsquo;s also System 1 that tempts me to eat 5 pieces of cake, although System 2 knows that I won&rsquo;t feel good afterwards.</p>
<p>It&rsquo;s System 1, that when getting my phone to find something, urges me to check for new messages.
System 2 knows it&rsquo;s bad, because I become distracted, sometimes agitated, and forget what I wanted to do.</p>
<p>It&rsquo;s also System 1, that entertains itself with daydreaming or grooving to music while doing boring, mundane activities such as packing things. System 1 works well, when it&rsquo;s habitual, when we don&rsquo;t need to think. But slight deviations, such as things not being in the exact same place or something additional that needs to be thought, let the system fail.</p>
<h2 id="dealing-with-impulses">Dealing with impulses</h2>
<h3 id="save-energy-with-routines">Save energy with routines</h3>
<p>Always being in System 2 mode is too expensive and we wouldn&rsquo;t get things done. Willpower is limited.
So it&rsquo;s crucial to focus System 2 on the important. Routines help to take the burden of System 2, so it pays off to routinize reoccurring problems.<br>
If I make it a rule to brush my teeth, when I get foot in the door late, it makes it a bit easier to resist the food craving.
When I turn off notifications or use my laptop instead of the phone, it becomes easier to avoid distraction.</p>
<h3 id="mastering-self-control">Mastering Self-control</h3>
<p>Fortunately, our lifes are not just montonous routines. Many situations are unexpected and our feelings vary.
The reason we keep doing harmful things is that our System 2 is not sharply observing or is lacking will power to tame System 1.
The first step is to step out of automatic mode and shift the focus to the present. Meditation is good practice for this. By shifting the focus on the breath and not doing anything else, it becomes easier to observe the mind.</p>
<p>After becoming aware of our impulses, the challenge is to substitute something immediately rewarding against some more far-distant and currently non-tangible benefit.
The problem is that our lazy-self seeks to maximize present reward.</p>
<p>But how do we work against our lazy pleasuring seeking self to pursue something that pays off long term?</p>
<p>Here comes the power of self-control. Learning to resist, to say no. The key to build positive habits is self-control. Saying no is much more important than saying yes.
Saying yes is easy, it&rsquo;s indulging, gives immediate rewards and avoids problems (in the very moment).
Saying no is uncomfortable. Be it external like turning down an invitation or ask for help, or internal like resisting an urge to eat junk food. Most often we / our System 2 knows we should say no, but we lack self-control.
We forego the long-term reward of sticking to our high priorities to avoid imminent pain and discomfort. Even if the pain will be much higher in the future.</p>
<p>But saying &ldquo;No&rdquo; can be pleasing. Every time we say it, it&rsquo;s a proof of strength, self-determination, and a clear and focused mind. Isn&rsquo;t this a nice compliment to yourself?
Exercise feels rewarding after overcoming the inertia to go and pushing the body to it&rsquo;s limits. Work is rewarding after solving a hard, frustrating problem.
We constantly pursue comfort in all aspects of life, but comfort is not fullfilling, it&rsquo;s not rewarding.
We should instead associate discomfort; that is saying no with rewards.</p>
<p>Self-control unlocks positive change by letting us focus on the important, but more importantly by steering us away from the harmful. And like everything else, we can practice it. So I invite you to find your impulses in your day. Find small things, such as not checking the phone, or not eating the first time you feel the urge. <a href="https://podcastnotes.org/huberman-lab/optimize-your-brain-with-science-based-tools-huberman-lab/" target="_blank" rel="noopener noreffer">Dr. Huberman</a> coins these NO-GO&rsquo;s and tries to find 15 small NO-GO&rsquo;s every day. But it&rsquo;s better to start small than not at all. My big NO-GO are sweets this month.
What&rsquo;s yours?</p>
]]></description></item><item><title>Ship it - My public journal</title><link>https://astobbe.me/posts/letters-intro/</link><pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/letters-intro/</guid><description><![CDATA[<p>Inspired by <a href="https://www.jenvermet.com/" target="_blank" rel="noopener noreffer">Jen Vermet&rsquo;s</a> ship-it and weekly letters, I will start to share my thoughts and learnings in public. I love how personal and introspective her thoughts and shared experiences are.
I&rsquo;ve started <a href="/posts/building-a-journaling-habit-with-obsidian/" rel="">journaling last year</a>, but my thoughts are mostly very raw and hidden to the outside world. By starting a public journal, I want to challenge myself to become more open and overcome the imposter that my thoughts are not worth being shared.</p>
<p>I am still figuring out the format, if it will be weekly or daily. But my goal is to share my learnings and thoughts at least once per week.</p>
<p>You will find my entries <a href="/categories/letters/" rel="">here</a>.</p>
]]></description></item><item><title>Calico config for kubeadm cluster on Azure</title><link>https://astobbe.me/posts/calico-azure/</link><pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/calico-azure/</guid><description><![CDATA[<p>Recently, I tried to configure calico networking on a self-managed Kubernetes cluster on Azure.
It did not work out of the box and many instructions on the internet did not work for me.
In the following, I want to share my setup.
To set up the network and VMs, I followed <a href="https://blog.nillsf.com/index.php/2021/10/29/setting-up-kubernetes-on-azure-using-kubeadm/" target="_blank" rel="noopener noreffer">this tutorial</a>. After installing the <a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises" target="_blank" rel="noopener noreffer">default configuration of calico</a>, inter-node communication between pods did not work.</p>
<p>My working approach uses User-Defined-Routes (UDR) on Azure to route traffic from the different pod-subnets of each node.
Be sure to only have one IP address assigned to each network interface! I installed the Azure CNI plugin before, which assigns pod IPs from the secondary IPs of the vnet that are assigned to the network interface. This caused problems in the IP detection in Calico, but it can be easily fixed by deleting the secondary IPs.</p>
<p>When bootstrapping Kubernetes, you should also set the pod subnet (CIDR) to avoid address overlap with the virtual network.
The default for kubeadm is <code>192.168.0.0/16</code> which indeed overlapped with my Azure network.</p>
<p>This is my kubeadm config:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat conf.yaml
</span></span><span class="line"><span class="cl">apiServer:
</span></span><span class="line"><span class="cl">  timeoutForControlPlane: 4m0s
</span></span><span class="line"><span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
</span></span><span class="line"><span class="cl">kind: ClusterConfiguration
</span></span><span class="line"><span class="cl">kubernetesVersion: v1.19.16 #-beta.0.1017_d0acb1e3ae68d3-dirty
</span></span><span class="line"><span class="cl">networking:
</span></span><span class="line"><span class="cl">  podSubnet: &#34;172.16.0.0/16&#34;
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
</span></span><span class="line"><span class="cl">kind: InitConfiguration
</span></span><span class="line"><span class="cl">nodeRegistration:
</span></span><span class="line"><span class="cl">  criSocket: &#34;/run/containerd/containerd.sock&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>To bootstrap the cluster, execute:
<code>./kubeadm init --upload-certs  --cri-socket &quot;/run/containerd/containerd.sock&quot; --config conf.yaml</code></p>
<p>Then, get the calico setup from <a href="https://projectcalico.docs.tigera.io/getting-started/kubernetes/self-managed-onprem/onpremises" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>In the yaml set the pod CIDR:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">- name: CALICO_IPV4POOL_CIDR
</span></span><span class="line"><span class="cl">  value: &#34;172.16.0.0/16&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><p>To configure the inter-node pod communication, I followed these steps <a href="https://stackoverflow.com/a/67242381/10531075" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>Before applying I recommend to set up VXLAN instead of ipip mode (see below).
By default, calico uses ipip tunneling for pod communication. A tunnel is a virtual network interface to connect subnets. This did not work in my Azure network.
Instead, I configured VXLAN.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat vxlan.yaml
</span></span><span class="line"><span class="cl">apiVersion: crd.projectcalico.org/v1
</span></span><span class="line"><span class="cl">kind: IPPool
</span></span><span class="line"><span class="cl">metadata:
</span></span><span class="line"><span class="cl">  name: ippool-vxlan-1
</span></span><span class="line"><span class="cl">spec:
</span></span><span class="line"><span class="cl">  cidr: 172.16.0.0/16
</span></span><span class="line"><span class="cl">  vxlanMode: Always
</span></span><span class="line"><span class="cl">  natOutgoing: true
</span></span></code></pre></td></tr></table>
</div>
</div><p>Traffic to the pod network (outside the node)  should then not be routed to <code>tunl0</code>  anymore:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip a
</span></span><span class="line"><span class="cl">4: tunl0@NONE: &lt;NOARP,UP,LOWER_UP&gt; mtu 1480 qdisc noqueue state UNKNOWN group default qlen 1000
</span></span><span class="line"><span class="cl">    link/ipip 0.0.0.0 brd 0.0.0.0
</span></span></code></pre></td></tr></table>
</div>
</div><p>Install <code>calioctl</code> and verify that there is only one ippool:
<code>calicoctl get ippools</code></p>
<p>If not, delete the other pool:
<code>calicoctl delete pool default-ipv4-ippool</code></p>
<p>You need to reboot, to force a reassignment of the pod IPs to the new network.</p>
<p>Then doublecheck that the the CIDR did not change:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">kubectl get ipamblocks.crd.projectcalico.org \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>-<span class="l">o jsonpath=&#34;{range .items[*]}{&#39;podNetwork: &#39;}{.spec.cidr}{&#39;\t NodeIP: &#39;}{.spec.affinity}{&#39;\n&#39;}&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Otherwise, you need to update the Azure routing table!</p>
<p>If you want to dig deeper into the different networking options in calico for Azure, I recommend this video:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/JyLtg_SJ1lo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></description></item><item><title>[Tutorial]: Bootsrapping your custom Kubernetes with kubeadm</title><link>https://astobbe.me/posts/custom-k8s/</link><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/custom-k8s/</guid><description><![CDATA[<p>In this tutorial, I want to show you how to bootstrap a Kubernetes cluster with <code>kubeadm</code> using your customized Kubernetes fork. This might be useful if you want to use new features that are not yet merged in the upstream. For development, it&rsquo;s of course much easier to set up a local cluster (<code>./hack/local-up-cluster.sh</code>), but to test functionality across different nodes, you might need a distributed cluster.</p>
<p>One option is to install it <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way" target="_blank" rel="noopener noreffer">The hard way</a>, but I think it&rsquo;s more convenient to use <code>kubeadm</code>.
The challenge is that you need container images for the kube control-plane components.</p>
<p>I found it difficult to find good documentation on this process, so I hope to help you along with this.</p>
<h2 id="requirements">Requirements</h2>
<p>By default Kubeadm pulls the Kubernetes version matching the version of kubeadm from the official registry. But it also allows to specify a custom registry.
To install our custom Kubernetes, we will need to build and pull the required container images, tag them with the expected version of kubeadm, and the push them to our registry.</p>
<h2 id="build-images">Build images</h2>
<p>I built the images on a Ubuntu machine, since the build is resource intensive.
Kubernetes is big, so be sure to have enough space on the VM! The build happens inside a docker container, so make sure to have docker installed. VMs usually only have a small disk image, so I created a symbolic link to save the docker files on another attached drive (here mounted on <code>/mnt</code>):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo -s
</span></span><span class="line"><span class="cl">systemctl stop docker
</span></span><span class="line"><span class="cl">rm -rf /var/lib/docker
</span></span><span class="line"><span class="cl">mkdir -p /mnt/docker
</span></span><span class="line"><span class="cl">ln -s /mnt/docker /var/lib/docker
</span></span><span class="line"><span class="cl">systemctl restart docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, inside the kubernetes root path, specify your docker registry and run:
<code>KUBE_SERVER_PLATTFORMS=&quot;linux/amd64&quot; KUBE_DOCKER_REGISTRY=&quot;sadrian99&quot; KUBE_RELEASE_RUN_TESTS=n ./build/release-images.sh</code>
I recommend to set a flag for the image version such that the version coincides with what kubeadm expects (version of kubeadm).
In my case, this was <code>v1.19.16</code>.</p>
<h2 id="tag-images-and-push-to-registry">Tag images and push to registry</h2>
<p>The generated image names have a trailing <code>amd64</code> which needs to be removed for <code>kubeadm</code>:
<code>IMGN</code>: new name for kubadm
<code>IMG</code>: old image name
<code>VER</code>: old version tag
<code>VERN</code>: new version tag
<code>REPO</code>: your container registry url
In my case, <code>REPO=sadrian99</code> and <code>VERN=v.19.16</code>. Then we tag the image with the new name:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">export IMG=kube-apiserver-amd64; export IMGN=kube-apiserver
</span></span><span class="line"><span class="cl">docker tag $REPO/$IMG:$VER sadrian99/$IMGN:$VERN &amp;&amp; docker push $REPO/$IMGN:$VERN```
</span></span></code></pre></td></tr></table>
</div>
</div><p>You need to do this for these images:</p>
<ul>
<li>kube-apiserver:v1.19.16</li>
<li>kube-controller-manager:v1.19.16</li>
<li>kube-scheduler:v1.19.16</li>
<li>kube-proxy:v1.19.16</li>
</ul>
<p>Additionally you need to pull these images and copy them to your registry:</p>
<ul>
<li>pause:3.2</li>
<li>etcd:3.4.7-0</li>
<li>coredns:1.6.7</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">export D=coredns:1.6.7
</span></span><span class="line"><span class="cl">docker pull k8s.gcr.io/$D &amp;&amp; docker tag k8s.gcr.io/$D $REPO/$D &amp;&amp; docker push $REPO/$D
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="kubeadm-bootstrap">Kubeadm bootstrap</h2>
<p>You can test if the images are all available:
<code>kubeadm config images pull --image-repository sadrian99 </code></p>
<p>Then you can add <code>--image-repository sadrian99</code> to the <code>init</code> command to bootstrap your cluster.</p>
<p>Congrats, you should now have a cluster with your own Kubernetes version! I used this to <a href="/posts/pod-migration" rel="">migrate pods</a> across nodes. Let me know what your use case is!</p>
]]></description></item><item><title>[Tutorial]: Kubernetes stateful pod migration</title><link>https://astobbe.me/posts/pod-migration/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/pod-migration/</guid><description><![CDATA[<p>This is an extensive tutorial on how to set up a Kubernetes cluster that supports pod migration.</p>
<h2 id="why">Why</h2>
<p>Statelessness is the basic foundation for microservices run inside Kubernetes. Outside it&rsquo;s main application domain, the platform also appeals to the High Performance Computing (HPC) community for that infrastructure management can be delegated to cloud providers and it&rsquo;s on-demand scaling. The challenge is that HPC jobs are usually long running and stateful. Jobs such as simulations or optimization problems usually keep their state in memory and state checkpointing on disk is not always available.
This is undesirable because failures are expected to occur.
Matters becomes even worse for jobs with unpredictable resource requirements. Unexpected spikes in memory can lead to out-of-memory node situations, which results in pods being killed. The catastrophic consequence is the complete loss of job progress from many hours or even days of compute time.
To avoid this, a migration of stateful pods to another node would be desirable.</p>
<h2 id="status-quo">Status quo</h2>
<p>Currently, Kubernetes does not support pod migration.
However, a PoC of a pod migration n prior work by <a href="https://www.researchgate.net/publication/349662156_Migrating_Pods_in_Kubernetes" target="_blank" rel="noopener noreffer">Jakob Schrettenbrunner</a> showed the feasibility. A <a href="https://github.com/kubernetes/enhancements/pull/1990" target="_blank" rel="noopener noreffer">proposal</a> to support very basic checkpointing (forensic checkpoiting without restore) functionality has recently been accepted by the Kubernetes community as well and is expected to be available in future releases.</p>
<h2 id="goal">Goal</h2>
<p>Building on the prior PoC of Jakob Schrettenbrunner, I want to show you step by step how to set up a Kubernetes cluster with pod migration functionality. Bootstrapping a Kubernetes cluster from scratch is not a trivial task, but <code>kubeadm</code> will help us. Jakob also provided some <a href="https://docs.google.com/document/d/1E5p_FOHDGAp5YEQ23dCi9I8wPnMzd4aOazxI4uO_AMo/edit#" target="_blank" rel="noopener noreffer">documentation</a> on his setup and while very helpful it is far from complete and does not mention all potential gotchas. You might suspect already that this won&rsquo;t be a quick and easy process, but I hope to make it a lot easier for you through this extensive tutorial.</p>
<h2 id="demo">Demo</h2>
<p>To see what to expect, here is a quick demo of the steps to migrate a pod:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IPY852th_T0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<h2 id="1-cluster-setup">1. Cluster setup</h2>
<p>The cluster consists of 1 master node and 2 worker nodes. The VMs are provisioned in Microsoft Azure. For migrating the pod across a worker node, <a href="https://docs.microsoft.com/en-us/azure/storage/files/files-smb-protocol?tabs=azure-portal" target="_blank" rel="noopener noreffer">Azure&rsquo;s SMB file share server</a>) is used. You might also use an NFS server (and it might even make things easier as mentioned later..), but this was not possible for company policy reasons in my case.</p>
<p>Kubernetes is bootstrapped using <code>kubeadm</code>. It&rsquo;s tested with version <code>v1.19.0-beta.0.1015+b521fb5114995f-dirty</code> ( binaries are available <a href="https://github.com/elchead/kubernetes/releases/tag/v8.1.0" target="_blank" rel="noopener noreffer">here</a>, but I recommend building from source).</p>
<h3 id="network-setup">Network setup</h3>
<p>To set up the cluster network, I followed <a href="https://blog.nillsf.com/index.php/2021/10/29/setting-up-kubernetes-on-azure-using-kubeadm/" target="_blank" rel="noopener noreffer">this tutorial</a>. You can use the web shell on Azure for this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">az group create -n kubeadm -l westus2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network vnet create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --address-prefix 192.168.0.0/16 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --subnet-name kube <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --subnet-prefix 192.168.0.0/16
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nsg create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubeadm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nsg rule create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --nsg-name kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubeadmssh <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --protocol tcp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --priority <span class="m">1000</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --destination-port-range <span class="m">22</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --access allow
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nsg rule create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --nsg-name kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubeadmWeb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --protocol tcp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --priority <span class="m">1001</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --destination-port-range <span class="m">6443</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --access allow
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network vnet subnet update <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -g kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -n kube <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --vnet-name kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network-security-group kubeadm
</span></span><span class="line"><span class="cl"><span class="c1"># load balancer:</span>
</span></span><span class="line"><span class="cl">az network public-ip create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name controlplaneip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --sku Standard <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --dns-name nilfrankubeadm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> az network lb create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubemaster <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --sku Standard <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --public-ip-address controlplaneip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --frontend-ip-name controlplaneip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --backend-pool-name masternodes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network lb probe create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --lb-name kubemaster <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubemasterweb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --protocol tcp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --port <span class="m">6443</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network lb rule create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --lb-name kubemaster <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name kubemaster <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --protocol tcp <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --frontend-port <span class="m">6443</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --backend-port <span class="m">6443</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --frontend-ip-name controlplaneip <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --backend-pool-name masternodes <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --probe-name kubemasterweb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --disable-outbound-snat <span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --idle-timeout <span class="m">15</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --enable-tcp-reset <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nic ip-config address-pool add <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --address-pool masternodes <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ip-config-name ipconfigkube-master-1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --nic-name kube-master-1VMNic <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --lb-name kubemaster
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">az network nic ip-config address-pool add <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --address-pool masternodes <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --ip-config-name ipconfigkube-master-2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --nic-name kube-master-2VMNic <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --resource-group kubeadm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --lb-name kubemaster
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="vm-provisioning">VM provisioning</h3>
<p><strong>Master</strong></p>
<p>The specs of my master node VM are as follows on Ubuntu 21.04 (20.04 LTS could also be used):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;kube-master-3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;location&#34;</span><span class="p">:</span> <span class="s2">&#34;westeurope&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ubuntu-21-04-lts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;publisher&#34;</span><span class="p">:</span> <span class="s2">&#34;tidalmediainc&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;product&#34;</span><span class="p">:</span> <span class="s2">&#34;ubuntu-21-04-lts&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;vmSize&#34;</span><span class="p">:</span> <span class="s2">&#34;Standard_D2ds_v4&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Worker</strong></p>
<p>Both worker VMs share the same specs:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;zone2/zone3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;location&#34;</span><span class="p">:</span> <span class="s2">&#34;westeurope&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;vmSize&#34;</span><span class="p">:</span> <span class="s2">&#34;Standard_E16-4ds_v4&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;imageReference&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;publisher&#34;</span><span class="p">:</span> <span class="s2">&#34;canonical&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;offer&#34;</span><span class="p">:</span> <span class="s2">&#34;0001-com-ubuntu-server-focal&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;sku&#34;</span><span class="p">:</span> <span class="s2">&#34;20_04-lts-gen2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;latest&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After connecting to the VM, go into root mode:
<code>sudo -s</code>
All following steps assume this!</p>
<h2 id="2-kernel-downgrade">2. Kernel downgrade</h2>
<h3 id="worker">Worker</h3>
<p>As mentioned <a href="https://github.com/checkpoint-restore/criu/issues/860" target="_blank" rel="noopener noreffer">here</a>, recent Ubuntu kernels broke compatibility with CRIU.
Hence we downgrade the kernel:
<code>apt install -y linux-image-unsigned-5.4.0-1068-azure</code></p>
<p>Follow <a href="https://meetrix.io/blog/aws/changing-default-ubuntu-kernel.html" target="_blank" rel="noopener noreffer">these steps</a> to change the boot kernel.</p>
<h2 id="3-install-prequisites">3. Install Prequisites</h2>
<h3 id="master-node">Master node</h3>
<h4 id="containerd--kubelet">Containerd + Kubelet</h4>
<p>On the master node, you can install the official releases:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="p">|</span> sudo apt-key add -
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb https://apt.kubernetes.io/ kubernetes-xenial main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/kubernetes.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apt update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">apt install -y containerd kubelet
</span></span></code></pre></td></tr></table>
</div>
</div><p>But for safety, you should replace the <code>kubelet</code> with the binary path defined in the systemd service (<code>/usr/bin/kubelet</code>).
You can get the customized kubelet like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/elchead/kubernetes/releases/download/v8.1.0/kubelet
</span></span><span class="line"><span class="cl">chmod +x ./kubelet
</span></span><span class="line"><span class="cl">cp ./kubelet /usr/bin
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="kubeadm">Kubeadm</h4>
<p>To get the <code>kubeadm</code> version compatible with our modified kubernetes. Inside your home directory, do:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/elchead/kubernetes/releases/download/v8.1.0/kubeadm
</span></span><span class="line"><span class="cl">chmod +x ./kubeadm
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="kubectl">Kubectl</h4>
<p>Install as described <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/" target="_blank" rel="noopener noreffer">here</a></p>
<h3 id="worker-node">Worker node</h3>
<p>I recommend to perform the following steps in parallel on both worker VMs. You might use <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/01-prerequisites.md#running-commands-in-parallel-with-tmux" target="_blank" rel="noopener noreffer">tmux</a> or iTerm on Mac ( <code>Cmd+Shift+i</code>).</p>
<h4 id="criu">CRIU</h4>
<p>As described <a href="https://software.opensuse.org/download/package?package=criu&amp;project=devel%3Atools%3Acriu" target="_blank" rel="noopener noreffer">here</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;deb http://download.opensuse.org/repositories/devel:/tools:/criu/xUbuntu_20.04/ /&#39;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/devel:tools:criu.list
</span></span><span class="line"><span class="cl">curl -fsSL https://download.opensuse.org/repositories/devel:tools:criu/xUbuntu_20.04/Release.key <span class="p">|</span> gpg --dearmor <span class="p">|</span> sudo tee /etc/apt/trusted.gpg.d/devel_tools_criu.gpg &gt; /dev/null
</span></span><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install -y criu
</span></span></code></pre></td></tr></table>
</div>
</div><p>Verify the version to be 3.16.1:
<code>criu --version</code></p>
<h4 id="golang">Golang</h4>
<p>Follow <a href="https://go.dev/doc/install" target="_blank" rel="noopener noreffer">here</a>. I installed v1.17.8:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://go.dev/dl/go1.17.8.linux-amd64.tar.gz
</span></span><span class="line"><span class="cl">tar -C /usr/local -xzf go1.17.8.linux-amd64.tar.gz
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="containerd">Containerd</h4>
<h5 id="install-dependencies">Install dependencies</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apt install btrfs-progs libbtrfs-dev runc
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="systemd-service">Systemd service</h5>
<p>I took the dirty path and used <code>apt</code> to install an official release :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apt update
</span></span><span class="line"><span class="cl">apt install containerd
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, I later replaced the binary defined in the systemd config with my fork binary.
The file looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat /lib/systemd/system/containerd.service
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Copyright The containerd Authors.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);</span>
</span></span><span class="line"><span class="cl"><span class="c1"># you may not use this file except in compliance with the License.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You may obtain a copy of the License at</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     http://www.apache.org/licenses/LICENSE-2.0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Unless required by applicable law or agreed to in writing, software</span>
</span></span><span class="line"><span class="cl"><span class="c1"># distributed under the License is distributed on an &#34;AS IS&#34; BASIS,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See the License for the specific language governing permissions and</span>
</span></span><span class="line"><span class="cl"><span class="c1"># limitations under the License.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>containerd container runtime
</span></span><span class="line"><span class="cl"><span class="nv">Documentation</span><span class="o">=</span>https://containerd.io
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>network.target local-fs.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">ExecStartPre</span><span class="o">=</span>-/sbin/modprobe overlay
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/containerd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>notify
</span></span><span class="line"><span class="cl"><span class="nv">Delegate</span><span class="o">=</span>yes
</span></span><span class="line"><span class="cl"><span class="nv">KillMode</span><span class="o">=</span>process
</span></span><span class="line"><span class="cl"><span class="nv">Restart</span><span class="o">=</span>always
</span></span><span class="line"><span class="cl"><span class="nv">RestartSec</span><span class="o">=</span><span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Having non-zero Limit*s causes performance problems due to accounting overhead</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in the kernel. We recommend using cgroups to do container-local accounting.</span>
</span></span><span class="line"><span class="cl"><span class="nv">LimitNPROC</span><span class="o">=</span>infinity
</span></span><span class="line"><span class="cl"><span class="nv">LimitCORE</span><span class="o">=</span>infinity
</span></span><span class="line"><span class="cl"><span class="nv">LimitNOFILE</span><span class="o">=</span>infinity
</span></span><span class="line"><span class="cl"><span class="c1"># Comment TasksMax if your systemd version does not supports it.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Only systemd 226 and above support this version.</span>
</span></span><span class="line"><span class="cl"><span class="nv">TasksMax</span><span class="o">=</span>infinity
</span></span><span class="line"><span class="cl"><span class="nv">OOMScoreAdjust</span><span class="o">=</span>-999
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="build">Build</h5>
<p>I recommend to build from source, but you may also use the binaries inside <code>bin</code>.</p>
<p>Clone my fork and checkout the <code>checkpoint</code> branch. If you want to use the version that only uploads a zip to the file server (please read under [6. Set up file server](#6. Set up file server), use <code>checkpoint-zip</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p /root/go/src/github.com/containerd <span class="o">&amp;&amp;</span> <span class="nb">cd</span> /root/go/src/github.com/containerd
</span></span><span class="line"><span class="cl">git clone https://github.com/elchead/containerd.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> containerd
</span></span><span class="line"><span class="cl">git checkout checkpoint
</span></span></code></pre></td></tr></table>
</div>
</div><p>Build from source:
<code>make &amp;&amp; make install</code></p>
<h4 id="update-systemd-svc-to-custom-binary">Update systemd svc to custom binary</h4>
<p>Stop the service:
`systemctl stop containerd</p>
<p>Inside root of the repository, do:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cp ./bin/containerd /usr/bin/containerd
</span></span><span class="line"><span class="cl">systemctl start containerd
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="configure-cni-plugins">Configure CNI plugins</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GOPATH</span><span class="o">=</span>/root/go
</span></span><span class="line"><span class="cl">./script/setup/install-cni
</span></span></code></pre></td></tr></table>
</div>
</div><p>In the output the CNI version is set to 1.0.0 which is wrong. So we change it to a supported version such as 0.3.0 :
<code>vim /etc/cni/net.d/10-containerd-net.conflist</code></p>
<p>To be safe, restart the containerd service after after configuring the CNI plugins:
`systemctl restart containerd</p>
<h4 id="kubelet">Kubelet</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="p">|</span> sudo apt-key add -
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb https://apt.kubernetes.io/ kubernetes-xenial main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/kubernetes.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt -y install kubelet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Then replace the binary:
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://github.com/elchead/kubernetes/releases/download/v8.1.0/kubelet
</span></span><span class="line"><span class="cl">chmod +x ./kubelet
</span></span><span class="line"><span class="cl">cp ./kubelet /usr/bin
</span></span></code></pre></td></tr></table>
</div>
</div><p>Modify the systemd service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
</span></span><span class="line"><span class="cl"><span class="c1"># Note: This dropin only works with kubeadm and kubelet v1.11+</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Environment</span><span class="o">=</span><span class="s2">&#34;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">Environment</span><span class="o">=</span><span class="s2">&#34;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># This is a file that &#34;kubeadm init&#34; and &#34;kubeadm join&#34; generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically</span>
</span></span><span class="line"><span class="cl"><span class="nv">EnvironmentFile</span><span class="o">=</span>-/var/lib/kubelet/kubeadm-flags.env
</span></span><span class="line"><span class="cl"><span class="c1"># This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use</span>
</span></span><span class="line"><span class="cl"><span class="c1"># the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.</span>
</span></span><span class="line"><span class="cl"><span class="nv">EnvironmentFile</span><span class="o">=</span>-/etc/default/kubelet
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/kubelet <span class="nv">$KUBELET_KUBECONFIG_ARGS</span> <span class="nv">$KUBELET_CONFIG_ARGS</span> <span class="nv">$KUBELET_KUBEADM_ARGS</span> <span class="nv">$KUBELET_EXTRA_ARGS</span> --container-runtime-endpoint<span class="o">=</span>/run/containerd/containerd.sock --v<span class="o">=</span><span class="m">9</span> --read-only-port<span class="o">=</span><span class="m">0</span> --anonymous-auth<span class="o">=</span><span class="nb">true</span> --authorization-mode<span class="o">=</span>AlwaysAllow --container-runtime<span class="o">=</span>remote
</span></span><span class="line"><span class="cl">~
</span></span></code></pre></td></tr></table>
</div>
</div><p>The kubelet config should look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">cat /var/lib/kubelet/config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubelet.config.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">authentication</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">anonymous</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">webhook</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cacheTTL</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">x509</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">clientCAFile</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/kubernetes/pki/ca.crt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">authorization</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">Webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">webhook</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cacheAuthorizedTTL</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cacheUnauthorizedTTL</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusterDNS</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="m">10.96.0.10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusterDomain</span><span class="p">:</span><span class="w"> </span><span class="l">cluster.local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cpuManagerReconcilePeriod</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">evictionPressureTransitionPeriod</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">fileCheckFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">healthzBindAddress</span><span class="p">:</span><span class="w"> </span><span class="m">127.0.0.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">healthzPort</span><span class="p">:</span><span class="w"> </span><span class="m">10248</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">httpCheckFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">imageMinimumGCAge</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">KubeletConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeStatusReportFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeStatusUpdateFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">resolvConf</span><span class="p">:</span><span class="w"> </span><span class="l">/run/systemd/resolve/resolv.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rotateCertificates</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">runtimeRequestTimeout</span><span class="p">:</span><span class="w"> </span><span class="l">50m0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">staticPodPath</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/kubernetes/manifests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">streamingConnectionIdleTimeout</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">syncFrequency</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumeStatsAggPeriod</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s important to set the <code>runtimeRequestTimeout</code> to a higher value (default is 2 minutes), if you intend to migrate big containers (~50GB+)!</p>
<h4 id="kubeadm-1">Kubeadm</h4>
<p>Install as above for the master node:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wget https://github.com/elchead/kubernetes/releases/download/v8.1.0/kubeadm
</span></span><span class="line"><span class="cl">chmod +x ./kubeadm
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="4-kubernetes-bootstrapping">4. Kubernetes bootstrapping</h2>
<h3 id="networking">Networking</h3>
<p>First, we set up the networking and containerd.
I followed <a href="https://blog.nillsf.com/index.php/2021/10/29/setting-up-kubernetes-on-azure-using-kubeadm/" target="_blank" rel="noopener noreffer">this tutorial</a>, but it might not be necessary:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf
</span></span></span><span class="line"><span class="cl"><span class="s">overlay
</span></span></span><span class="line"><span class="cl"><span class="s">br_netfilter
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo modprobe overlay
</span></span><span class="line"><span class="cl">sudo modprobe br_netfilter
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Setup required sysctl params, these persist across reboots.</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-iptables  = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.ip_forward                 = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Apply sysctl params without reboot</span>
</span></span><span class="line"><span class="cl">sudo sysctl --system
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo mkdir -p /etc/containerd
</span></span><span class="line"><span class="cl">containerd config default <span class="p">|</span> sudo tee /etc/containerd/config.toml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl restart containerd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
</span></span></span><span class="line"><span class="cl"><span class="s">br_netfilter
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-iptables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">sudo sysctl --system
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="kubeadm-init">Kubeadm init</h3>
<p>On the master node, create a config file in your home directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim conf.yaml
</span></span><span class="line"><span class="cl">apiServer:
</span></span><span class="line"><span class="cl">  timeoutForControlPlane: 4m0s
</span></span><span class="line"><span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
</span></span><span class="line"><span class="cl">imageRepository: sadrian99
</span></span><span class="line"><span class="cl">kind: ClusterConfiguration
</span></span><span class="line"><span class="cl">kubernetesVersion: v1.19.16
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">apiVersion: kubeadm.k8s.io/v1beta2
</span></span><span class="line"><span class="cl">kind: InitConfiguration
</span></span><span class="line"><span class="cl">nodeRegistration:
</span></span><span class="line"><span class="cl">  criSocket: <span class="s2">&#34;/run/containerd/containerd.sock&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Through this, the registry with the customized Kubernetes components will be used.</p>
<p>Then, start the cluster with:
<code>./kubeadm init --upload-certs --cri-socket &quot;/run/containerd/containerd.sock&quot; --config conf.yaml</code></p>
<p>Note: Ideally, the cluster is exposed with a DNS endpoint, but this did not work for me!</p>
<p>As the output indicates, perform:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p <span class="nv">$HOME</span>/.kube
</span></span><span class="line"><span class="cl">sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
</span></span><span class="line"><span class="cl">sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then, copy the output to join the cluster on a worker node. It looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubeadm join 192.168.0.7:6443 --token 90djfo.2386gkxicg6y2ywo <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --discovery-token-ca-cert-hash sha256:0834d5d47c16799e2b1b4df3431923570549fe903f9339f875dd1f2f9d2dd2ef
</span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, set up CNI:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f <span class="s2">&#34;https://cloud.weave.works/k8s/net?k8s-version=1.19&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="verify-cluster-state">Verify cluster state</h3>
<p><code>kubectl get node -w</code>
Should show a ready node after a few seconds.</p>
<p><code>kubectl get po -A</code>
Should show all pods running (including coredns!).</p>
<h3 id="debugging">(Debugging)</h3>
<p>If the node does not get ready, check the logs of the kubelet:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">journalctl -u kubelet [-f]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Or if you don&rsquo;t find any hints from there, look here:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">journalctl -u  containerd [-f]
</span></span></code></pre></td></tr></table>
</div>
</div><p>It happened to me, that I got the error <code>cni plugin not initialized</code>.
If this is the case, be sure to repeat step the CNI plugin installation from above again.</p>
<p>If a pod is not running, use <code>kubectl describe</code> to debug.</p>
<p>Otherwise, a cluster reset might also help:
<code>./kubeadm reset --cri-socket &quot;/run/containerd/containerd.sock&quot;</code></p>
<h3 id="join-worker">Join worker</h3>
<p>Install crictl as prequisite:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">VERSION=&#34;v1.23.0&#34;
</span></span><span class="line"><span class="cl">wget https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$VERSION-linux-amd64.tar.gz
</span></span><span class="line"><span class="cl">sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
</span></span><span class="line"><span class="cl">rm -f crictl-$VERSION-linux-amd64.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><p>On the worker node, run the previously copied join command.
You might need to add <code>--cri-socket &quot;/run/containerd/containerd.sock&quot;</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">./kubeadm join 192.168.0.7:6443 --token 90djfo.2386gkxicg6y2ywo     --discovery-token-ca-cert-hash sha256:0834d5d47c16799e2b1b4df3431923570549fe903f9339f875dd1f2f9d2dd2ef --cri-socket &#34;/run/containerd/containerd.sock&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>To verify, go back to the master node and check that the new node appears ready.</p>
<h3 id="copy-kubeconfig">Copy kubeconfig</h3>
<p>Now, copy the kubeconfig from the master node (<code>$HOME/.kube/config</code>) to the worker node inside <code>config</code> and export it:
<code>export KUBECONFIG=$HOME/config</code></p>
<p>The migration PoC needs the kubeconfig inside a special directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkdir -p /var/lib/kubelet
</span></span><span class="line"><span class="cl">cp $HOME/config /var/lib/kubelet/kubeconfig
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="5-demo-test-migration">5. Demo (test migration)</h2>
<h3 id="deploy-stateful-pod">Deploy stateful pod</h3>
<p>Now it&rsquo;s time to test the migration, with a simple memory allocating pod (here 50 MB):
<code>kubectl run counter1 --restart=Never --image &quot;ghcr.io/schrej/podmigration-testapp:latest&quot; -- -m 50</code>. It&rsquo;s important to set <code>restartPolicy:Never</code> to prevent the original container from restarting during migration (relevant for large migrations)!</p>
<p>Through <code>kubectl get po -owide</code>, you can get pod IP and increment a stateful counter.
Be sure to do this on the worker node:
<code>curl $POD_IP:8080</code>
Repeat the counter increment a few times, to validate the successful migration later.</p>
<h3 id="clone-pod">Clone pod</h3>
<p>The pod spec is identical, except that it has an additional field <code>spec.clonePod</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">creationTimestamp</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">counter1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mcounter1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clonePod</span><span class="p">:</span><span class="w"> </span><span class="l">counter1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- -<span class="l">m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="s2">&#34;50&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">ghcr.io/schrej/podmigration-testapp:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">counter1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterFirst</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">restartPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The migration should be very fast.
Currently, the old pod gets broken during the migration. But the cloned pod should be running.
Requesting it&rsquo;s endpoint with <code>curl</code> should return a number bigger than 1. Voila - you have successfully cloned a stateful pod in Kubernetes!</p>
<h2 id="6-set-up-file-server">6. Set up file server</h2>
<h3 id="important-warning">Important warning</h3>
<p>I had consistency problems for bigger file uploads with SMB. The container restore command is issued 1 second after the disk checkpoint has been saved completely.
However, at this time not all files of the checkpoint directory were uploaded successfully.</p>
<p>I circumvented this problem by storing the checkpoint on local disk and only storing a zipped archive on the server.
The temporary local-disk location is <code>/var/lib/kubelet/check</code>. Since, the OS disk is usually only 30GB, you will need to create a symbolic link to a bigger disk. In my case, a temporary disk with 500GB was mounted in <code>/mnt</code>.
To solve this, do:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">rm -r /var/lib/kubelet/check/
</span></span><span class="line"><span class="cl">ln -s /mnt /var/lib/kubelet/check
</span></span></code></pre></td></tr></table>
</div>
</div><p>Interestingly, the compression immensly reduced the checkpoint size for the simple example app. For 50GB of allocated memory, the compressed zip was only around 20MB!
This modification was done inside containerd in the branch <code>checkpoint-zip</code>.</p>
<h3 id="steps">Steps</h3>
<p>The procedure is specific to Azure and is well documented <a href="https://docs.microsoft.com/en-us/azure/storage/files/storage-how-to-use-files-linux?tabs=smb311" target="_blank" rel="noopener noreffer">here</a>. The server should be mounted inside <code>/var/libe/kubelet/migration</code>. I used the static mount and my /etc/fstab entry looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//SERVER_URL/checkpoints /var/lib/kubelet/migration cifs nofail,credentials=/etc/smbcredentials/STORAGECLASSNAME.cred,serverino,cache=none
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="development">Development</h2>
<p>If you want to develop further or quickly test changes, it is much easier to work with a local cluster.
Inside the kubernetes repo root, run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">CONTAINER_RUNTIME=remote CONTAINER_RUNTIME_ENDPOINT=&#34;unix:///run/containerd/containerd.sock&#34; CGROUP_DRIVER=&#34;systemd&#34; KUBELET_AUTHORIZATION_WEBHOOK=&#34;false&#34; KUBELET_FLAGS=&#34;--read-only-port=0 --anonymous-auth=true --authorization-mode=AlwaysAllow&#34; ./hack/local-up-cluster.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>To read the logs for the kubelet, you can use: <code>tail -f /tmp/kubelet.log</code>.</p>
<h2 id="end">End</h2>
<p>I admit that this was a long tutorial and it&rsquo;s likely not everything went smooth while following along. If you are stuck at some step, you can contact me and I can try to help :)</p>
]]></description></item><item><title>[Tutorial]: K8s Monitoring with InfluxDB's Telegraf</title><link>https://astobbe.me/posts/k8s-monitoring-with-influx-telegraf/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/k8s-monitoring-with-influx-telegraf/</guid><description><![CDATA[<p>InfluxDB is an Open-Source timeseries database which can be used for monitoring Kubernetes clusters.
In this tutorial, I want to show you step by step how to get a dashboard with metrics on Kuberntes resource usage of podes and nodes. It&rsquo;s not difficult, but the official documentation is outdated and confusing, so I hope to make it easier for you.
We will use InfluxDB2 which includes a nice dashboard and supports the Flux QL query language.</p>
<h3 id="1-download-helm-chart-repohttpsgithubcominfluxdatahelm-charts-and-add-to-helm">1. Download <a href="https://github.com/influxdata/helm-charts" target="_blank" rel="noopener noreffer">helm chart repo</a> and add to helm:</h3>
<pre><code>helm repo add influxdata https://helm.influxdata.com/
</code></pre>
<h3 id="2-deploy-influxdb2">2. Deploy Influxdb2</h3>
<p>No settings need to be adjusted:</p>
<p><code>helm upgrade --install influx2 influxdata/influxdb2</code></p>
<p>But you should note down the password for the admin user:</p>
<p><code>echo $(kubectl get secret influx2-influxdb2-auth -o &quot;jsonpath={.data['admin-password']}&quot; --namespace tick | base64 --decode)</code></p>
<p>To open the Influx UI, do:</p>
<p><code>kubectl port-forward svc/influx2-influxdb2 8081:80</code></p>
<p>Now, you can open <code>localhost:8081</code> and log in with user: admin and the before copied password.</p>
<h3 id="3-add-telegraf-configuration-in-influxdb">3. Add Telegraf Configuration in Influxdb</h3>
<p>In the UI sidebar, click <code>Data</code> and add &ldquo;Telegraf Configuration&rdquo;. Choose Kubernetes and enter a name: (e.g <code>telegraf</code>).
Then, copy the API token.</p>
<h3 id="4-deploy-telegraf">4. Deploy Telegraf</h3>
<p>We choose the Daemonset <code>telegraf-ds</code>, because it is expected for the <code>Kuberntes input</code> plugin, which among many others observes the node and pod resources.
Now open the <code>values.yaml</code> and add the following information under <code>config.outputs</code>:</p>
<pre><code>    - influxdb_v2:
        urls:
          - &quot;http://influx2-influxdb2.tick.svc&quot;
        token: INSERT_TOKEN
        organization: &quot;influxdata&quot;
        bucket: &quot;default&quot;
</code></pre>
<p>The input plugins are configured by default.</p>
<p>Then deploy the chart:</p>
<pre><code>helm upgrade --install ds-telegraf influxdata/telegraf-ds -f values.yaml
</code></pre>
<h3 id="5-view-metrics-data">5. View metrics data</h3>
<p>If all went well, you should now receive metrics data and see them in the UI under <code>Explore</code>:</p>
<p>




</p>
<h3 id="6-connect-local-client-with-db">6. Connect local client with DB</h3>
<p>If you want to query the DB through a locally installed CLI client or their Go-client, you can use the port-forwarding from earlier and use this adress to connect:
<code>kubectl port-forward svc/influx2-influxdb2 8081:80</code>.</p>
<p>This step was not so intuitive to me, because in InfluxDb 1 the service exposed the 8086 port for this. But now the UI and the database connection are both reachable through this port.</p>
<p>To test the connection with the CLI you can use:</p>
<p><code>influx ping --host http://localhost:8081</code></p>
<p>This is all there is to it. If you have any questions or find that my tutorial got outdated, please contact me :)</p>
]]></description></item><item><title>My semester in Barcelona</title><link>https://astobbe.me/posts/erasmus/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/erasmus/</guid><description><![CDATA[<p>Last September, I moved to Barcelona for an exchange semester at UPC.
Now that I&rsquo;m leaving the city, I want to look back on the past months.</p>
<p>Living in Spain was a dream come true. Since I was little, I felt attracted to the country: the people, the language and the weather.
Barcelona was an obvious choice after falling in love with the city and making a good friend there in 2018.
I wanted to take these months for exploration and self discovery. I paused my work contract to find time for side projects and to go out.</p>
<h2 id="living-with-roomies">Living with roomies</h2>
<p>I moved in a shared flat with my friend which was also my first true roomie experience. After living alone for more than a year, I got to enjoy the solitude, but  it was interesting to live in a more lively environment. Living under the same roof with someone provides a deep view into how they live and deal with all kinds of daily situations.
As a result, I adopted some of their behaviors - some intentionally, some unconsciously.
Two of my roommates are a couple and I liked how openly they would discuss their worries and feelings.
I come from a family where we did not share much personal feelings, so I tend to choke them up, but my roomie told me how good it feels to vent off and not let problems accumulate.
There is a healthy limit of course, but I agree and have been opening up on my inner thoughts.</p>
<h2 id="eating-vegan">Eating vegan</h2>
<p>Secondly, I got into veganism through my roommates. They are good and healthy cooks and I liked to explore new meals. I started eating more vegetables (steamed 👌) and got new food inspirations. I realized how I could mostly drop all of the non-vegan stuff and find good substitutes. I already mostly avoided meat before (for health and ethical reasons) but consumed lots of dairies, eggs etc.
My friend raised my awareness for how I equally support industrial livestock farming with those animal products, just like meat.
I did not become vegan, but I&rsquo;ve set it as my baseline.</p>
<h2 id="side-projects">Side projects</h2>
<p>Working on my own projects was challenging and highly rewarding at the same time. It&rsquo;s challenging because there is no one to keep you responsible and motivated. On the other hand, finishing a project pushes the confidence in one&rsquo;s own skills and seeing people star the project, because they might potentially find it useful, feels great. My biggest project was my personal search engine <a href="https://github.com/elchead/misou" target="_blank" rel="noopener noreffer">misou</a>. It started as a Hackathon project with some friends from uni and I continued working on it to practice and make it usable.
On the side, I was reading O&rsquo;reilly literature on TDD, polished up on Typescript and React and enjoyed how I could bring into practice in my project without excuses (dirty legacy code..). With a classmate, I solved a <a href="https://github.com/elchead/mars-kata" target="_blank" rel="noopener noreffer">small kata</a> to practice TDD and get to know Svelte. It was really fun but also instructive to see the others perspective.
I also developed a little <a href="https://github.com/elchead/blog-cli" target="_blank" rel="noopener noreffer">blog CLI</a> which is super useful to me and forked a personal CRM to my needs.</p>
<p>Reserving time for my learning goals and work on what seems meaningful to me is something I definitely plan to keep.</p>
<h2 id="swimming-and-salsa">Swimming and Salsa</h2>
<p>I found much more time to exercise and rediscovered swimming. I like how swimming calms the mind and brings the focus to the body. Compared to other sports, I find it easier to do deliberate practice: focusing on breathing, body movements. And observing the improvement always felt rewarding. I went from panting after about 50m to calmly swimming freestyle for more than 1km.</p>
<p>I also went outside to dance much more often. I took my first bachata course and went on a salsa congress. I made progress in my style, but I realized that I need a regular dancing partner to practice outside classes. Consolidating new figuras in memory takes more than one class, but unless I feel good about them I won&rsquo;t incorporate them into social dance. As a salsa master told me on one occasion: &ldquo;It takes a lot of practice and going through the basics gets repetitive and boring, but this is what it takes to get good.&rdquo; I want to keep Salsa as a fun activity and don&rsquo;t become professional, but I will need more deliberate practice to progress.</p>
<h2 id="heading">☀️🏝😀</h2>
<p>The sunny weather and secondly the beach were real boosters for my happiness that I don&rsquo;t want to miss anymore. Sometimes I would pause and just appreciate how good it is to be here in this moment compared to the grey winter in Germany. The sun is my simple pleasure. Similarly, I also love the sea. I particularly enjoyed yoga classes on the beach in the morning, watching the sunrise, the outdoor beach gym and cold bathing.
But even a simple walk by the sea would lift my mood.
I&rsquo;ve set both elements high on the priority list for where I want to live after my studies.</p>
<h2 id="the-more-social-me">The more social me</h2>
<p>Since living alone during COVID times, I spent much less time socializing but also enjoyed spending time with myself. The experience with my roommates and the more social nature of the people here (talking and hanging out..), however got me to rethink.
I want to share more with my friends again and seek more time to hang out together. I&rsquo;ve changed my attitude towards strangers and enjoy talking to new people. In the last weeks that I approached people, I was impressed by the positive responses and amazed by the kind of people I coincidentally met.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The time passed all too fast and I am hesitant to leave. But what lies ahead is the next chapter enriched by all the learnings from the last one. Sure, I won&rsquo;t have another Erasmus semester but adventures are not a matter of chance or destiny, but rather something that needs to be looked for. I&rsquo;m excited to see what the next chapter will be!</p>
]]></description></item><item><title>2022 - Goals</title><link>https://astobbe.me/posts/2022/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/2022/</guid><description><![CDATA[<p><style>
  #callout {
    background: #22272e;
     

    padding: 1.5em 1.25em;
    border-radius: 3px;
    display: flex;
    flex-direction: row;
    margin-bottom: 20px;
  }
  #callout-inner {
    margin-left: 1em;
  }
  @media (max-width: 767px) {
    #callout {
      padding: 1.5em 0.75em 1.5em 0.6em;
    }
    #callout-inner {
      margin-left: 0.5em;
    }
  }
</style>

<div id="callout">
  <div></div>
  <div id="callout-inner">TLDR, the short version is at the end :) </div>
</div>

I hope you had a good start in the new year! I&rsquo;m late in the game, but I want to share my goals for this year with you.</p>
<p>I started with it last year and I found them helpful to focus my energy and time. Every week, I checked my progress in my weekly review.
All in all, I am satisfied because I reached the important goals and learnt more about my capacity. Most of my goals were habit building ones like: meditate daily, do exercise bidaily, go to bed before 10:30 pm, journal daily, read 10 books.. But there is still much to be improved upon. I defined too many goals and did not did not prioritize accordingly. Also, I want to remind myself more often of them, so I will make a pinned note on my desktop and phone (thanks to <a href="https://thesephist.com/posts/2021-goals/#looking-back-at-2020" target="_blank" rel="noopener noreffer">thesephist</a> for the idea).</p>
<p>So here are my goals for this year:</p>
<h2 id="goals">Goals</h2>
<h3 id="long-term-learning">Long-term learning</h3>
<p>The idea of the learning projects arose last year through a friend who reserved one hour in the morning to read books for his long-term career development. In the past, I easily got caught up with what is important in the moment and invested all effort into it. But I became a believer of the 80/20 rule and want to invest not only in the urgent but also in the important (Eisenhower matrix).</p>
<p>I want to take time in the morning to learn what I believe important and listen more to technical podcasts. I already discovered a lot of tools and resources through it last year: Learning Golang with TDD (my fav), Wails, Svelte, vim tricks&hellip; And it broadens my horizon on topics I&rsquo;ve never heard about like BPFs for Observability of microservices and compiler development in the old days..
So exposing myself to new input is one part and the second is to get my own hands dirty to really learn. This can mean solving exercises / following a learning project or applying the new tool / language in my own little project.</p>
<h3 id="connect-with-friends-and-be-a-host">Connect with friends and be a host</h3>
<p>I found the hosting goal on <a href="https://thesephist.com/posts/2021-goals/#looking-back-at-2020" target="_blank" rel="noopener noreffer">thesephist&rsquo;s list</a> and my immediate reaction was that I want to do it too.</p>
<p>I love to get to know new people and exchange on interests. Jordan Harbinger got me intrigued with his Networking course !! to be more intentional about network building. It happened only a few times to me until now, but it&rsquo;s gratifying to help a friend through some connection. But while calls are great to exchange on technical stuff, it&rsquo;s not the same as hanging out with a friend. I guess I&rsquo;m not the exception, but I just connect much better with people emotionally in person. Unfortunately, many of my friends live in other cities or even countries. In the past, I did not make enough effort to visit because I mistook digitally staying in touch to be enough.
This year, I plan to visit more close but far-away friends.
But getting back to the intro, I also want to host gatherings with friends to connect and make space for good conversations. I was very humble to keep the number to two, because of my current living situation (not having an own home + switching places) but for me it&rsquo;s most important to start doing it at all.
I like to be proactive and I want to learn to become a good host.
This also applies to technical activities. Last year, I started the clean-code challenge with a friend, invited a friend to solve a coding kata together, initiated to go on a hackathon with some friends, but I want to grow these activities in size and quantity.</p>
<h3 id="exploring-fun-skills">Exploring fun skills</h3>
<p>As part of my goal to socialize more, I want to bring more fun to conversations. Being a good listener, asking curious questions is all great, but I want to be more dynamic in groups. However, most of my hobbies are not fun to show (writing, meditation, swimming&hellip;). Last year, I found <a href="/books/storyworthy/" rel="">storytelling</a>, re-read <a href="https://www.goodreads.com/book/show/35167685-surely-you-re-joking-mr-feynman" target="_blank" rel="noopener noreffer">&ldquo;Surely You&rsquo;re Joking, Mr. Feynman!&rdquo;</a> (highly recommended) and got inspired to be more curious in exploring random interests. In the case of Feynman it was opening locks, solving puzzles, playing tricks, very random observations that challenged his friends to conduct a fun experiment.. Yeah, he was an intriguing guy..</p>
<p>This year, I want to explore two random interests. Candidates are storytelling (e.g. join toastmasters..), learning magic tricks, learning the ukulele..</p>
<h3 id="engage-with-the-twitter-community">Engage with the twitter community</h3>
<p>Last year, I made it my goal to join twitter and try it out. Indeed, I found some great people to follow and want to engage more in threads and discussions. Also, I want to use it to share my findings and micro-thoughts.
If you are a twitter user and I don&rsquo;t yet follow you, please let me know :)
My bigger goal of this is to build friendships and a community with shared interests.</p>
<h3 id="mostly-vegan-and-sweet-free-month">Mostly vegan and sweet free month</h3>
<p>Through living with my vegan roommates, I got more aware about the origin of dairy products. I already rarely ate meat before, but through my roommates I explored delicious vegan meals and saw that I can largely avoid dairies as well. I reduced my meat consumption close to zero, but I hadn&rsquo;t given up on fish. I&rsquo;m not yet ready or convinced for going completely vegan, but I want to make my diet at least 80% vegan. I believe in it&rsquo;s health benefits and want to greatly reduce my footprint in the animal industry.<br>
Secondly, I want to exercise self-control and remind myself of the addiction to sugar.
My Christmas sweets (gone within a few days) have reminded me of it and how they often makes me feel unwell. I will resist sweets for one month this year and keep sugar to a minimum throughout the rest of the year.</p>
<h2 id="tldr">TLDR</h2>
<p>




</p>
<h3 id="habits-i-want-to-build--fortify">Habits I want to build / fortify</h3>
<ul>
<li>No distractions during first 3h of day (phone)</li>
<li>Learning hour in the morning</li>
<li>Journal daily</li>
<li>Care for mental well-being daily (meditation, walks&hellip;)</li>
</ul>]]></description></item><item><title>My fuckups of 2021</title><link>https://astobbe.me/posts/fuckups-2021/</link><pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/fuckups-2021/</guid><description><![CDATA[<blockquote>
<p>The only real mistake is the one from which we learn nothing - Henry Ford.</p>
</blockquote>
<p>In 2021, I took more time to reflect on my failures. While doing my yearly review, I decided to pick 3 fuckups and share them with you. Maybe it can help you, avoid similar mistakes. And if not, may my naiveness at least make you laugh!</p>
<h2 id="the-macbook-that-proved-light-as-air">The MacBook that proved light as air</h2>
<p>Earlier this year, I bought a used MacBook Air. I fucked up in nearly all possible ways and it taught me many lessons.</p>
<p>First, I bought it on eBay Kleinanzeigen from a nice guy who even gave me a discount as a student and I had a nice chat with him when picking it up. He quickly showed me that it was working (turned it on) and I blindly believed that everything would be good; that is what the description said and the guy was trustworthy!
When at home, I quickly found out that the battery had a defect. I don&rsquo;t think that the owner mischievously lied to me, because after some discussions he later generously agreed to give a discount or help with repair.
But it was my responsibility to make a careful check (battery, display, keyboard, touchpad, internet, ports).</p>
<p>A few weeks later on a windy day, I went outside to study and opened it on a table. For one second I did not hold it and the next moment my beautiful MacBook Air flew through the air. It was a quick gust and after a few meters it crashed on the rough floor.
I already expected the worst, but it was still fully working. Nevertheless, but it got some ugly scratches and deformations. How was I so mindless not putting one and one together on such a windy day?</p>
<p>This is not yet the end. Later, I decided to buy a cheap battery on eBay to replace it together with my dad. Paying Apple 140 Euros for the repair just seemed like a big rip-off to me!
The replacement was quite fiddly and when connecting the new battery, the CPU suddenly got hot and it started smoking. My dad even got a slight burn. Now, the MacBook was completely dead. How could this have gone much worse?</p>
<p>The moral of the story is to be more averse of big risks. A big second-hand purchase should be carefully checked. People might not have bad intents, but I am responsible for everything that might be discovered afterwards. Secondly, it&rsquo;s not worth to risk a big loss to save a few bucks because it might turn out much more expensive.</p>
<h2 id="missed-chances-during-my-erasmus-exchange">Missed chances during my Erasmus exchange</h2>
<p>When coming to Barcelona, I was determined to avoid the international bubble. I had been seeing it during my stay in China and I largely avoided it, because I wanted the &ldquo;China experience&rdquo;. I&rsquo;d say I succeeded because I tried to hang out with Chinese whenever possible, but nevertheless most of my friends were internationals. However, I somehow failed to transfer this observation to my next exchange. I took the wrong conclusion from the observation that it is easier to connect with Spanish people because we are culturally closer.</p>
<p>The first day I arrived on the campus in Barcelona, I ignored the compatriots behind my back that were getting to know each other. I ignored all Erasmus welcoming activities, because I wanted to make Spanish friends. And while I was disappointed to see that there was no canteen to talk to new faces during lunch, I still believed that there would be plenty of opportunities through uni associations, sports, classes, parties.
As it turned out though, the activities at my uni were very counted (or I missed the secret channel ^^). Dancing was another prospect, but in the end I could count the total number of peers with my fingers.
I also made a few intents approaching people on campus, but of course they mostly spoke Catalan. I did not expect it, but it made me feel a bit like an outsider. I guess it taught me that I would not want to live in a place whose local language I would not speak (or plan to learn).
I regret not having participated at the welcoming events. I learnt that I need to seize opportunities in the moment, to not bet on later chances because they might not come. It was a missed chance with not much to lose.</p>
<h2 id="chasing-rainbows-or-the-spanish-drivers-license">Chasing rainbows or the Spanish drivers license</h2>
<p>I didn&rsquo;t take driving classes like all my friends at 17, because I didn&rsquo;t want a car and thought there would come a better moment to do it abroad cheaply.
Short disclaimer: that was a stupid thought. Last year,I was finally abroad and not so much loaded with uni and work. Besides it would be cheaper here in Spain - perfect timing. But my first mistake was not to inform well on the local circumstances. I knew I would need a NIE document and even checked the official website, but it just said no appointments available at the moment. I thought: &ldquo;oh well COVID&rdquo;, it will hopefully change when I am there and there will be a way.. After quite some effort to get an officer on the phone, I found out that this is the default display because the few new appointments are immediately snatched away. For weeks I tried to get an appointment by constantly refreshing the page, booked one in a far away city, but all in vain. It was hopeless. I finally got one through a bot from a dude on Github - that&rsquo;s how insane the situation is. <a href="https://twitter.com/astobbe_/status/1448710106875629574" target="_blank" rel="noopener noreffer">Paying the NIE fee</a> was a whole different story.. Before, I went to many driving schools to ask for the required documents and all replied that I&rsquo;d be fine with the NIE. Long story short, it was unrealistic to complete it in Barcelona and after finding a school in another city they found out that I&rsquo;d need to proof 6 months of residency in Spain. After all the efforts, it failed on this.</p>
<p>Had I done my research early (to my defense, it was not pointed out on all websites) or contacted the authorities directly, I could have saved all this wasted time. My takeaway: Get the information early, before investing much effort. Otherwise you are irrationally inclined to pursue it no matter the cost. Secondly, get information either directly from the source (authorities) or google experiences from others. I received much misinformation from the driving schools and even banks..</p>
]]></description></item><item><title>Testable code has few mocks</title><link>https://astobbe.me/posts/js-testing/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://astobbe.me/posts/js-testing/</guid><description><![CDATA[<p>Testing can sometimes seem hard and tedious. We might be faced with complex setup logic and many mocks. But this is a smell of poor code design. When properly done, mocks are rarely needed. TDD helps to avoid tight coupling and it naturally tends towards functional code. In this post, I cover how the functional style leads to less error prone code and fewer code to be tested. Moreover, we will explore when it is proper to use mocks.</p>
<h2 id="integration-vs-operation">Integration vs Operation</h2>
<p>When solving a problem the process is always to break it up into smaller pieces. The problem solution is then just the composition of the smaller units. So we define functions for each subproblem and one integration function to solve the big problem. There should be a clear distinction between operation and integration (also see <a href="https://clean-code-developer.com/grades/grade-1-red/#Integration_Operation_Segregation_Principle_IOSP" target="_blank" rel="noopener noreffer">Integration Operation Segregation Principle</a>).
Each small unit should be independent, i.e. unaware of the other parts in the composition.</p>
<blockquote>
<p>Mocking is required when our decomposition strategy has failed, Eric Elliott</p>
</blockquote>
<h2 id="function-composition">Function composition</h2>
<p>What was new to me is that composing functions do not need to be unit tested when they are truly independent. Because in such case we can use a generic composition utility.</p>
<p>Let&rsquo;s look at an example<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. The imperative and obvious solution to integrate is this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Imperative composition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">composition</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">afterG</span> <span class="o">=</span> <span class="nx">g</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">afterF</span> <span class="o">=</span> <span class="nx">f</span><span class="p">(</span><span class="nx">afterG</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">afterF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In languages without first-class functions, there might be no way around this. But in most popular languages, such as JavaScript, you can do better. Function composition is declarative and avoids bugs such as passing or returning the wrong variable.</p>
<p>For the declarative composition, you can either define your own pipe (which could be error-prone) or use a library<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// import pipe from &#39;lodash/fp/flow&#39;;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">pipe</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">fns</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">fns</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">y</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="nx">y</span><span class="p">),</span> <span class="nx">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Functions to compose
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">g</span> <span class="o">=</span> <span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">n</span> <span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Declarative composition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">doStuffBetter</span> <span class="o">=</span> <span class="nx">pipe</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span> <span class="nx">f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">doStuffBetter</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="c1">// 42
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Note that <code>reduce</code> applies the accumulator on each value from left to right! There is also a reverse variant called <code>reduceRight</code>. This reduction would have given 41 as result.</p>
<p>Commonly, we have asynchronous calls in our code, but we can also compose promises! I think this is also where it really pays off - when you compose calls with side effects. Unit testing the integration function becomes tedious, because we need to stub all participants<sup id="fnref2:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// imperative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">async</span> <span class="kd">function</span> <span class="nx">uploadFiles</span><span class="p">({</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">folder</span><span class="p">,</span> <span class="nx">files</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">dbUser</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">readUser</span><span class="p">({</span> <span class="nx">user</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">folderInfo</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">getFolderInfo</span><span class="p">({</span> <span class="nx">folder</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="kr">await</span> <span class="nx">haveWriteAccess</span><span class="p">({</span> <span class="nx">dbUser</span><span class="p">,</span> <span class="nx">folderInfo</span> <span class="p">}))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">uploadToFolder</span><span class="p">({</span> <span class="nx">dbUser</span><span class="p">,</span> <span class="nx">folderInfo</span><span class="p">,</span> <span class="nx">files</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&#34;No write access to that folder&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// declarative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">asyncPipe</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="p">(...</span><span class="nx">fns</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fns</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kr">async</span> <span class="p">(</span><span class="nx">y</span><span class="p">,</span> <span class="nx">f</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">f</span><span class="p">(</span><span class="kr">await</span> <span class="nx">y</span><span class="p">),</span> <span class="nx">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">uploadFiles</span> <span class="o">=</span> <span class="nx">asyncPipe</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">readUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFolderInfo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">haveWriteAccess</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">uploadToFolder</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">uploadFiles</span><span class="p">({</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">folder</span><span class="p">,</span> <span class="nx">files</span> <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">log</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you see, the declarative <code>uploadFiles</code> function is just a function call - no logic to be tested! The correctness of the step order is not assured, but in most cases this is covered in integration tests. If it&rsquo;s complex logic, you might still write a unit test to test the correct step order of the composition.</p>
<p>I agree that the declarative implementation (<code>asyncPipe</code>) is more difficult to understand at first, but it is less error prone and more concise. <code>asyncPipe</code> is given an array of functions that it reduces. <code>y</code> is the previous result and we apply <code>f</code> on it&rsquo;s result. The second return value <code>x</code> is the initial value. This syntax confused me a bit, but the initial value obviously needs to be provided at some place. This is functional programming!</p>
<h2 id="the-merits-of-functional-programming">The merits of Functional Programming</h2>
<p>The paradigm leads to code that is easier to test, because it is a stateless input / output machine. Moreover, it leaves less room for bugs, because you only declare what you want to perform instead of how to do it (imperative). However, it&rsquo;s not possible to only rely on functional programming, because applications are stateful and have side effects (network requests, file operations, logging&hellip;).
A good strategy is to keep the business logic functional and move side effects to the outer boundary.</p>
<p>Let&rsquo;s consider the example of an online shop that decides to give some premium benefits to its loyal customers. Premium customers might benefit from special discounts and free shipping so we want to update their status in the database.
On the other hand, we might want to reach out to the inactive customers. The status of our customer is clearly business logic and it should not be mixed with database logic.
One approach would be to pass a database interface and mock it in the test.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">updateCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">,</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">isLoyalCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">.</span><span class="nx">date</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntry</span> <span class="o">=</span> <span class="p">{</span><span class="nx">premium</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">entry</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">db</span><span class="p">.</span><span class="nx">UpdateEntry</span><span class="p">(</span><span class="nx">newEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">isInactiveCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">.</span><span class="nx">date</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntry</span> <span class="o">=</span> <span class="p">{</span><span class="nx">inactive</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">entry</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">db</span><span class="p">.</span><span class="nx">UpdateEntry</span><span class="p">(</span><span class="nx">newEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>But there is a better approach that is declarative and easier to test:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">updateCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">isLoyalCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">.</span><span class="nx">date</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntry</span> <span class="o">=</span> <span class="p">{</span><span class="nx">premium</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">entry</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="nx">FileUpdate</span><span class="p">(</span><span class="nx">newEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span><span class="p">(</span><span class="nx">isInactiveCustomer</span><span class="p">(</span><span class="nx">today</span><span class="p">,</span><span class="nx">entry</span><span class="p">.</span><span class="nx">date</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntry</span> <span class="o">=</span> <span class="p">{</span><span class="nx">inactive</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="p">...</span><span class="nx">entry</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="nx">FileUpdate</span><span class="p">(</span><span class="nx">newEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="k">new</span> <span class="nx">NoUpdate</span><span class="p">(</span><span class="nx">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It&rsquo;s clearer in the intent that the output is a return value instead of an input value with side effects. Also, there is no need to mock!
Of course there is still a missing piece for this variant - the mutable shell that applies the side effects.
In our case, there would be a <code>Persister</code>, which is a database wrapper that reads the update instructions. It&rsquo;s correctness would be covered in the integration test.</p>
<h2 id="when-to-use-mocks">When to use mocks</h2>
<p>Be aware that mocks are sometimes the only way to test logic. But think what exactly needs to be tested. For testing the request handler of our express app, it&rsquo;s not necessary to create a mockserver. We only want to test the handler logic. Express logic to create the server with port allocation etc. does not need to be tested by us!</p>
<p>I find the distinction between handlers and servers especially clear in Golang:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">handler</span> <span class="o">:=</span> <span class="nf">newHelloHandler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">request</span> <span class="o">:=</span> <span class="nf">newRequest</span><span class="p">(</span><span class="s">&#34;Floyd&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">response</span> <span class="o">:=</span> <span class="nx">httptest</span><span class="p">.</span><span class="nf">NewRecorder</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nf">assertStatus</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Code</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nf">assertResponseBody</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="s">&#34;Hello Floyd&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The handler object includes all logic how to process requests, so we can use it to test the correct behavior. Note how only the response needs to be mocked (spied to be precise).</p>
<p>In Express.js, we do the same. We test the handler function and spy the response object.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">const helloHandler  = (req, res) =&gt; res.send(&#39;Hello World!&#39;);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">const expected = &#39;Hello World!&#39;;
</span></span><span class="line"><span class="cl">const resSpy = {
</span></span><span class="line"><span class="cl">	send: (actual) =&gt; assert.Equal(actual,expected)
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">hello({}, resSpy);
</span></span></code></pre></td></tr></table>
</div>
</div><p>The request handler is at the outer layer of our application, i.e. it connects with external dependencies to cause side effects. In our case the external dependency is the response object which makes a network call. In that case it is justified and necessary to mock. The general guideline is to only mock external dependencies.</p>
<h2 id="conclusion">Conclusion</h2>
<p>By pushing the side effects to the outer layer of the application, we can mostly avoid mocks. Functional code is easy to test and allows to use function composition. This reduces the surface for bugs and saves us to write unit tests for integration functions.
Mocks have its place, but if it&rsquo;s not an external dependency it might be code smell.</p>
<p>If you want to learn more about testing, I can highly recommend <a href="https://www.manning.com/books/unit-testing" target="_blank" rel="noopener noreffer">Unit Testing Principles, Practices, and Patterns</a>.</p>
<div id="reachout-callout">
    <div>💙</div>
      <div id="callout-inner">
      If you have any additional thoughts, feedback or you think I got something wrong, I&#39;d like to hear from you!
      You can reach me through <a href='mailto:stobbe.adrian@gmail.com'>Email</a> or <a href='https://twitter.com/astobbe_'>Twitter</a>
    </div>
  </div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>adopted from <a href="https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a" target="_blank" rel="noopener noreffer">Source</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item></channel></rss>